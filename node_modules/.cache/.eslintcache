[{"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\index.tsx":"1","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\reportWebVitals.ts":"2","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\App.tsx":"3","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\context\\SessionContext.tsx":"4","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\index.tsx":"5","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\routes\\index.tsx":"6","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\SnackbarAlert\\index.tsx":"7","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\shadows.tsx":"8","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\typography.tsx":"9","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\shared\\constants.tsx":"10","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\UserDashboard.tsx":"11","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\AuthContainer.tsx":"12","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Errors\\NotFoundView.tsx":"13","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\AdminDashboard.tsx":"14","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\MainLayout\\index.tsx":"15","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\TopBar.tsx":"16","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\BulkUpload.tsx":"17","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\AddCandidate.tsx":"18","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\ManageCandidate.tsx":"19","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\User\\AddUser.tsx":"20","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\User\\ManageUser.tsx":"21","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Role\\AddRole.tsx":"22","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Role\\ManageRole.tsx":"23","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\index.tsx":"24","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\DashboardPage.tsx":"25","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\Admin.tsx":"26","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\index.tsx":"27","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Spinner\\index.tsx":"28","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\axiosConfig.tsx":"29","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DialogBox\\index.tsx":"30","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\RightProfile.tsx":"31","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\LeftProfile.tsx":"32","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\MyAccount.tsx":"33","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\serviceConfig.tsx":"34","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\EditProfile.tsx":"35","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\ViewProfile.tsx":"36","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\utils\\getInitials.js":"37","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\AccountPage.tsx":"38","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\ChangePassword.tsx":"39","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DialogBox\\ViewDialogBox.tsx":"40","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\ViewCandidate.tsx":"41","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\MainPage.tsx":"42","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\Login.tsx":"43","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\ForgotPassword.tsx":"44","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\ResetPassword.tsx":"45","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\index.tsx":"46","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DataGrid\\index.tsx":"47","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\Auth.tsx":"48","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\NavBar.tsx":"49","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\NavItem.tsx":"50"},{"size":478,"mtime":1650370519348,"results":"51","hashOfConfig":"52"},{"size":425,"mtime":1650370519463,"results":"53","hashOfConfig":"52"},{"size":652,"mtime":1650370519291,"results":"54","hashOfConfig":"52"},{"size":3339,"mtime":1650370521873,"results":"55","hashOfConfig":"52"},{"size":759,"mtime":1650370522596,"results":"56","hashOfConfig":"52"},{"size":4466,"mtime":1650370522250,"results":"57","hashOfConfig":"52"},{"size":2795,"mtime":1650370521452,"results":"58","hashOfConfig":"52"},{"size":1723,"mtime":1650370522649,"results":"59","hashOfConfig":"52"},{"size":721,"mtime":1650370522704,"results":"60","hashOfConfig":"52"},{"size":2678,"mtime":1650370522534,"results":"61","hashOfConfig":"52"},{"size":1799,"mtime":1650370521811,"results":"62","hashOfConfig":"52"},{"size":1627,"mtime":1650370521756,"results":"63","hashOfConfig":"52"},{"size":1329,"mtime":1650370520768,"results":"64","hashOfConfig":"52"},{"size":4755,"mtime":1650370521647,"results":"65","hashOfConfig":"52"},{"size":1331,"mtime":1650370522184,"results":"66","hashOfConfig":"52"},{"size":1898,"mtime":1650370521930,"results":"67","hashOfConfig":"52"},{"size":3934,"mtime":1650370519995,"results":"68","hashOfConfig":"52"},{"size":33671,"mtime":1650370519947,"results":"69","hashOfConfig":"52"},{"size":16746,"mtime":1650370520047,"results":"70","hashOfConfig":"52"},{"size":19181,"mtime":1650370520287,"results":"71","hashOfConfig":"52"},{"size":14178,"mtime":1650370520342,"results":"72","hashOfConfig":"52"},{"size":8353,"mtime":1650370520170,"results":"73","hashOfConfig":"52"},{"size":8832,"mtime":1650370520222,"results":"74","hashOfConfig":"52"},{"size":3663,"mtime":1650370520894,"results":"75","hashOfConfig":"52"},{"size":1688,"mtime":1650370521285,"results":"76","hashOfConfig":"52"},{"size":3792,"mtime":1650370522306,"results":"77","hashOfConfig":"52"},{"size":2922,"mtime":1650370521007,"results":"78","hashOfConfig":"52"},{"size":355,"mtime":1650370521515,"results":"79","hashOfConfig":"52"},{"size":288,"mtime":1650370522424,"results":"80","hashOfConfig":"52"},{"size":1563,"mtime":1650370520652,"results":"81","hashOfConfig":"52"},{"size":1117,"mtime":1650370521119,"results":"82","hashOfConfig":"52"},{"size":5999,"mtime":1650370521063,"results":"83","hashOfConfig":"52"},{"size":1097,"mtime":1650370522475,"results":"84","hashOfConfig":"52"},{"size":503,"mtime":1650370519516,"results":"85","hashOfConfig":"52"},{"size":10703,"mtime":1650370520950,"results":"86","hashOfConfig":"52"},{"size":9127,"mtime":1650370521173,"results":"87","hashOfConfig":"52"},{"size":139,"mtime":1650370522756,"results":"88","hashOfConfig":"52"},{"size":813,"mtime":1650370521232,"results":"89","hashOfConfig":"52"},{"size":8297,"mtime":1650370520831,"results":"90","hashOfConfig":"52"},{"size":1033,"mtime":1650370520706,"results":"91","hashOfConfig":"52"},{"size":8854,"mtime":1650370520103,"results":"92","hashOfConfig":"52"},{"size":783,"mtime":1650370521335,"results":"93","hashOfConfig":"52"},{"size":5122,"mtime":1650370520460,"results":"94","hashOfConfig":"52"},{"size":4329,"mtime":1650370520405,"results":"95","hashOfConfig":"52"},{"size":5396,"mtime":1650370520527,"results":"96","hashOfConfig":"52"},{"size":2116,"mtime":1650370521991,"results":"97","hashOfConfig":"52"},{"size":4541,"mtime":1650370520599,"results":"98","hashOfConfig":"52"},{"size":696,"mtime":1650370522369,"results":"99","hashOfConfig":"52"},{"size":3248,"mtime":1650370522073,"results":"100","hashOfConfig":"52"},{"size":1878,"mtime":1650370522126,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19via6t",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\reportWebVitals.ts",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\App.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\context\\SessionContext.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\routes\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\SnackbarAlert\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\shadows.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\theme\\typography.tsx",["225"],"import createBreakpoints from '@material-ui/core/styles/createBreakpoints'\nconst breakpoints = createBreakpoints({})\n\nexport default {\n  h1: {\n    fontWeight: 500,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 500,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 500,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 500,\n    fontSize: 20,\n    letterSpacing: '-0.06px',\n    [breakpoints.down('xs')]: {\n      fontSize: 16,\n    }\n  },\n  h5: {\n    fontWeight: 500,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 500,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  }\n};\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\shared\\constants.tsx",["226","227"],"import {\r\n  Settings as SettingsIcon,\r\n  Users as UsersIcon,\r\n  List as ListIcon,\r\n  FileText as FileTextIcon,\r\n} from \"react-feather\";\r\nimport AssignmentIcon from \"@material-ui/icons/AssignmentOutlined\";\r\nimport PostAdd from \"@material-ui/icons/PostAdd\";\r\n\r\nexport const PROJECT_PATHS = {\r\n  Auth: [\r\n    {\r\n      path: \"/\",\r\n      pagename: \"landing\",\r\n      title: \"Sign In\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/login\",\r\n      pagename: \"login\",\r\n      title: \"Sign In\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/forgotpassword\",\r\n      pagename: \"forgotpassword\",\r\n      title: \"Forgot Password\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/resetpassword/:id\",\r\n      pagename: \"resetpassword\",\r\n      title: \"Reset Password\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n  ],\r\n  Profile: [\r\n    {\r\n      path: \"/myaccount\",\r\n      pagename: \"myaccount\",\r\n      title: \"My Account\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n  ],\r\n  Admin: [\r\n    {\r\n      path: \"/roles\",\r\n      pagename: \"viewroles\",\r\n      title: \"Manage Roles\",\r\n      icon: SettingsIcon,\r\n      isnavitem: true,\r\n    },\r\n    {\r\n      path: \"/roles/add\",\r\n      pagename: \"addrole\",\r\n      title: \"Add Role\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/roles/edit/:id\",\r\n      pagename: \"editrole\",\r\n      title: \"Edit Role\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/users\",\r\n      pagename: \"viewusers\",\r\n      title: \"Manage Users\",\r\n      icon: UsersIcon,\r\n      isnavitem: true,\r\n    },\r\n    {\r\n      path: \"/users/register\",\r\n      pagename: \"adduser\",\r\n      title: \"Register User\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/users/edit/:id\",\r\n      pagename: \"edituser\",\r\n      title: \"Edit User\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n  ],\r\n  HiringManager: [\r\n    {\r\n      path: \"/candidates/bulkupload\",\r\n      pagename: \"bulkupload\",\r\n      title: \"Bulk Upload Candidates\",\r\n      icon: FileTextIcon,\r\n      isnavitem: true,\r\n    },\r\n    {\r\n      path: \"/candidates/edit/:id\",\r\n      pagename: \"editcandidate\",\r\n      title: \"Edit Candidate\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n    {\r\n      path: \"/candidates/add\",\r\n      pagename: \"addcandidate\",\r\n      title: \"Add Candidate\",\r\n      icon: {},\r\n      isnavitem: false,\r\n    },\r\n  ],\r\n  Manager: [\r\n    {\r\n      path: \"/candidates\",\r\n      pagename: \"viewcandidates\",\r\n      title: \"Manage Candidates\",\r\n      icon: ListIcon,\r\n      isnavitem: true,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const NumbersRegExp = /^[0-9\\s]+$/;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\UserDashboard.tsx",["228"],"import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport IPage from \"../classes/IPage\";\r\nimport ILoginUser from \"../classes/ILoginUser\";\r\nimport DashboardLayout from \"../layouts/DashboardLayout/\";\r\nimport MyAccount from \"../components/MyAccount/\";\r\nimport ManageCandidate from \"../components/Admin/Candidate/ManageCandidate\";\r\nimport BulkUpload from \"../components/Admin/Candidate/BulkUpload\";\r\nimport AddCandidate from \"../components/Admin/Candidate/AddCandidate\";\r\n\r\ninterface IUserDashboardProps {\r\n  pages: IPage[];\r\n  user: ILoginUser;\r\n}\r\n\r\nclass UserDashboard extends Component<IUserDashboardProps, {}> {\r\n  constructor(props: IUserDashboardProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const Pages = this.props.pages;\r\n    return (\r\n      <DashboardLayout pages={Pages}>\r\n        <Switch>\r\n          <Route\r\n            path={Pages.find((x) => x.pagename === \"myaccount\")?.path}\r\n            exact={true}\r\n            component={MyAccount}\r\n          />\r\n\r\n          <Route\r\n            path={Pages.find((x) => x.pagename === \"viewcandidates\")?.path}\r\n            exact={true}\r\n            component={ManageCandidate}\r\n          />\r\n\r\n          <Route\r\n            path={Pages.find((x) => x.pagename === \"addcandidate\")?.path}\r\n            exact={true}\r\n            component={AddCandidate}\r\n          />\r\n          <Route\r\n            path={Pages.find((x) => x.pagename === \"bulkupload\")?.path}\r\n            exact={true}\r\n            component={BulkUpload}\r\n          />\r\n          <Route\r\n            path={Pages.find((x) => x.pagename === \"editcandidate\")?.path}\r\n            exact={true}\r\n            component={AddCandidate}\r\n          />\r\n        </Switch>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserDashboard;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\AuthContainer.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Errors\\NotFoundView.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\containers\\AdminDashboard.tsx",["229"],"import \"react-perfect-scrollbar/dist/css/styles.css\";\nimport { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport IPage from \"../classes/IPage\";\nimport DashboardLayout from \"../layouts/DashboardLayout/\";\nimport MyAccount from \"../components/MyAccount/\";\nimport ManageRole from \"../components/Admin/Role/ManageRole\";\nimport AddRole from \"../components/Admin/Role/AddRole\";\nimport ManageUser from \"../components/Admin/User/ManageUser\";\nimport AddUser from \"../components/Admin/User/AddUser\";\nimport ManageCandidate from \"../components/Admin/Candidate/ManageCandidate\";\nimport BulkUpload from \"../components/Admin/Candidate/BulkUpload\";\nimport AddCandidate from \"../components/Admin/Candidate/AddCandidate\";\n// import ViewDSRDetail from \"../components/Admin/DSR/ViewDSRDetail\";\n// import ViewMyDSR from \"../components/User/DSR/ViewMyDSR\";\n// import ViewMyDSRDetail from \"../components/User/DSR/ViewDSRDetail\";\n// import AddDSR from \"../components/User/DSR/AddDSR\";\n// import AddTask from \"../components/User/DSR/AddTask\";\n// import MyProjects from \"../components/User/Project/MyProjects\";\n// import ViewEmployeeDSR from \"../components/User/DSR/ViewEmployeeDSR\";\n\ninterface IAdminDashboardProps {\n  pages: IPage[];\n}\n\nclass AdminDashboard extends Component<IAdminDashboardProps, {}> {\n  constructor(props: IAdminDashboardProps) {\n    super(props);\n  }\n\n  render() {\n    const Pages = this.props.pages;\n    return (\n      <DashboardLayout pages={Pages}>\n        <Switch>\n          <Route\n            path={Pages.find((x) => x.pagename === \"myaccount\")?.path}\n            exact={true}\n            component={MyAccount}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"viewroles\")?.path}\n            exact={true}\n            component={ManageRole}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"addrole\")?.path}\n            exact={true}\n            component={AddRole}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"editrole\")?.path}\n            exact={true}\n            component={AddRole}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"viewusers\")?.path}\n            exact={true}\n            component={ManageUser}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"adduser\")?.path}\n            exact={true}\n            component={AddUser}\n          />\n\n          <Route\n            path={Pages.find((x) => x.pagename === \"edituser\")?.path}\n            exact={true}\n            component={AddUser}\n          />\n\n          <Route\n            path={Pages.find((x) => x.pagename === \"viewcandidates\")?.path}\n            exact={true}\n            component={ManageCandidate}\n          />\n\n          <Route\n            path={Pages.find((x) => x.pagename === \"addcandidate\")?.path}\n            exact={true}\n            component={AddCandidate}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"bulkupload\")?.path}\n            exact={true}\n            component={BulkUpload}\n          />\n          <Route\n            path={Pages.find((x) => x.pagename === \"editcandidate\")?.path}\n            exact={true}\n            component={AddCandidate}\n          />\n          {/* <Route path={Pages.find(x => x.pagename === 'viewprojects')?.path} exact={true} component={ManageProject} />\n                    <Route path={Pages.find(x => x.pagename === 'addproject')?.path} exact={true} component={AddProject} />\n                    <Route path={Pages.find(x => x.pagename === 'editproject')?.path} exact={true} component={AddProject} />\n                   \n                    <Route path={Pages.find(x => x.pagename === 'viewdsrs')?.path} exact={true} component={ViewDSR} />\n                    <Route path={Pages.find(x => x.pagename === 'admindsrdetail')?.path} exact={true} component={ViewDSRDetail} />\n                    <Route path={Pages.find(x => x.pagename === 'mydsrs')?.path} exact={true} component={ViewMyDSR} />\n                   \n                    <Route path={Pages.find(x => x.pagename === 'mydsrdetail')?.path} exact={true} component={ViewMyDSRDetail} />\n                    <Route path={Pages.find(x => x.pagename === 'adddsr')?.path} exact={true} component={AddDSR} />\n                    <Route path={Pages.find(x => x.pagename === 'addtask')?.path} exact={true} component={AddTask} />\n                    <Route path={Pages.find(x => x.pagename === 'edittask')?.path} exact={true} component={AddTask} />\n                    <Route path={Pages.find(x => x.pagename === 'myprojects')?.path} exact={true} component={MyProjects} /> */}\n        </Switch>\n      </DashboardLayout>\n    );\n  }\n}\n\nexport default AdminDashboard;\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\MainLayout\\index.tsx",["230"],"import React, { Component } from \"react\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\";\n\nimport TopBar from \"../TopBar\";\n\n// Theme-dependent styles\nconst styles = (theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    width: '100%'\n  },\n  wrapper: {\n    display: 'flex',\n    flex: '1 1 auto',\n    overflow: 'hidden',\n    paddingTop: 64\n  },\n  contentContainer: {\n    display: 'flex',\n    flex: '1 1 auto',\n    overflow: 'hidden'\n  },\n  content: {\n    flex: '1 1 auto',\n    height: '100%',\n    overflow: 'auto'\n  }\n});\n\n//interface Props extends WithStyles<typeof styles>{ }\n\ninterface MainLayoutProps {\n  classes: any;\n  children?: React.ReactNode;\n}\n\nclass MainLayout extends Component<MainLayoutProps, {}> {\n  constructor(props: MainLayoutProps) {\n    super(props);\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root} >\n        <TopBar />\n        <div className={classes.wrapper}>\n          <div className={classes.contentContainer}>\n            <div className={classes.content}>\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(MainLayout);\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\TopBar.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\BulkUpload.tsx",["231","232"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { uploadCandidateDataRequest } from \"../../../services/Admin\";\r\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\r\nimport DashboardPage from \"../../Page/DashboardPage\";\r\nimport snackbarAlert from \"../../SnackbarAlert\";\r\nimport Spinner from \"../../Spinner\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mainBox: {\r\n    maxWidth: 800,\r\n    margin: \"16px auto 0\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fileName: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst BulkUpload = (props: any) => {\r\n  const classes = useStyles();\r\n  const manageCandidatePath = PROJECT_PATHS.Manager.find(\r\n    (x) => x.pagename === \"viewcandidates\"\r\n  )?.path as string;\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState<boolean>();\r\n  const [file, setFile] = useState<File>();\r\n  useEffect(() => {\r\n    if (isSubmitting) {\r\n      handleSubmit();\r\n    }\r\n  }, [isSubmitting]);\r\n\r\n  const handleFileChange = (event: any) => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      setFile(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (file) {\r\n        const response = await uploadCandidateDataRequest(file);\r\n        if (response && response.status) {\r\n          snackbarAlert.success(\"File uploaded successfully.\");\r\n          props.history.push(manageCandidatePath);\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      } else {\r\n        snackbarAlert.error(\"File not found.\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <DashboardPage title=\"Bulk Upload Candidates\">\r\n      <Box className={classes.mainBox}>\r\n        <Card>\r\n          <CardHeader\r\n            title=\"Add Candidates\"\r\n            style={{ textAlign: \"center\" }}\r\n            titleTypographyProps={{ variant: \"h3\", component: \"h3\" }}\r\n          />\r\n          <Divider />\r\n          <Box p={3}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n                <Button variant=\"contained\" component=\"label\">\r\n                  Upload Candidate Data\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n                    onChange={handleFileChange}\r\n                    hidden\r\n                  />\r\n                </Button>\r\n                <Typography\r\n                  variant=\"subtitle1\"\r\n                  component=\"span\"\r\n                  className={classes.fileName}\r\n                >\r\n                  {file ? file.name : null}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          <Divider />\r\n          <Box display=\"flex\" justifyContent=\"center\" p={1}>\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={!file || isSubmitting}\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              onClick={() => setIsSubmitting(true)}\r\n            >\r\n              {isSubmitting ? \"Please wait...\" : \"Upload\"}\r\n            </Button>\r\n            <Button\r\n              color=\"secondary\"\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              href={manageCandidatePath}\r\n            >\r\n              Back\r\n            </Button>\r\n          </Box>\r\n        </Card>\r\n      </Box>\r\n    </DashboardPage>\r\n  );\r\n};\r\n\r\nexport default BulkUpload;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\AddCandidate.tsx",["233","234","235","236","237","238","239","240","241","242","243"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, yupToFormErrors } from \"formik\";\r\nimport {\r\n  getRolesRequest,\r\n  getReportingManagersRequest,\r\n  getCandidateByIdRequest,\r\n  addCandidateByIdRequest,\r\n  updateCandidateByIdRequest,\r\n} from \"../../../services/Admin\";\r\nimport { IUserDropdown } from \"../../../classes/IUserShort\";\r\nimport IRole from \"../../../classes/IRole\";\r\nimport { ICandidate, IRegisterUser, IUpdateUser } from \"../../../classes/IUser\";\r\nimport ILoginUser from \"../../../classes/ILoginUser\";\r\nimport { PROJECT_PATHS, NumbersRegExp } from \"../../../shared/constants\";\r\nimport DashboardPage from \"../../Page/DashboardPage\";\r\nimport SessionContext from \"../../../context/SessionContext\";\r\nimport snackbarAlert from \"../../SnackbarAlert\";\r\nimport Spinner from \"../../Spinner\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mainBox: {\r\n    maxWidth: 800,\r\n    margin: \"16px auto 0\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport interface IFormValues {\r\n  Name: String;\r\n  DOB: String;\r\n  Email: String;\r\n  Skills: String;\r\n  Contact: String;\r\n  Designation: String;\r\n  ModifiedBy: String;\r\n  Profile: String;\r\n  Experience: String;\r\n  Reason_For_Leaving: String;\r\n  Source: String;\r\n  Interview_Schedule: String;\r\n  Date_Of_Joining: String;\r\n  Hiring_Status: String;\r\n  Comment: String;\r\n  Notice_Period: String;\r\n  Ready_To_Relocate: String;\r\n  Communication: String;\r\n  Current_CTC: String;\r\n  Current_Location: String;\r\n  Expected_CTC: String;\r\n  College_Name: String;\r\n  _id: String;\r\n  Resume: String;\r\n}\r\n\r\nconst AddCandidate = (props: any) => {\r\n  const classes = useStyles();\r\n  const loggedInUser = useContext(SessionContext).user as ILoginUser;\r\n  const CandidateId = props.match.params.id;\r\n  const manageCandidatePath = PROJECT_PATHS.Manager.find(\r\n    (x) => x.pagename === \"viewcandidates\"\r\n  )?.path as string;\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [viewOnly, setViewOnly] = useState(false);\r\n  const [roles, setRoles] = useState([] as IRole[]);\r\n  const [reportingmanagers, setReportingManagers] = useState(\r\n    [] as IUserDropdown[]\r\n  );\r\n  const [editableCandidate, setEditableCandidate] = useState(\r\n    undefined as ICandidate | undefined\r\n  );\r\n  const [initialValues, setInitialValues] = useState({\r\n    Name: \"\",\r\n    DOB: \"\",\r\n    Email: \"\",\r\n    Skills: \"\",\r\n    Contact: \"\",\r\n    Designation: \"\",\r\n    ModifiedBy: \"\",\r\n    Profile: \"\",\r\n    Experience: \"\",\r\n    Reason_For_Leaving: \"\",\r\n    Source: \"\",\r\n    Interview_Schedule: \"\",\r\n    Date_Of_Joining: \"\",\r\n    Hiring_Status: \"\",\r\n    Comment: \"\",\r\n    Notice_Period: \"\",\r\n    Ready_To_Relocate: \"\",\r\n    Communication: \"\",\r\n    Current_CTC: \"\",\r\n    Current_Location: \"\",\r\n    Expected_CTC: \"\",\r\n    College_Name: \"\",\r\n    _id: \"\",\r\n    Resume: \"\",\r\n  } as IFormValues);\r\n\r\n  const getRoles = async () => {\r\n    try {\r\n      const response = await getRolesRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_roles: IRole[] = response.Roles;\r\n        setRoles(drp_roles);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getReportingManagers = async () => {\r\n    try {\r\n      const response = await getReportingManagersRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_users: IUserDropdown[] = response.Users;\r\n        setReportingManagers(drp_users);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getCandidateById = async (CandidateId: string) => {\r\n    try {\r\n      const response = await getCandidateByIdRequest(CandidateId);\r\n      console.log(\"respo\", response.data);\r\n      if (response) {\r\n        const Candidate: ICandidate | undefined = response.data;\r\n        if (Candidate) {\r\n          setEditableCandidate(Candidate);\r\n          setInitialValues({\r\n            Name: Candidate.Name,\r\n            DOB: Candidate.DOB,\r\n            Email: Candidate.Email,\r\n            Skills: Candidate.Skills,\r\n            Contact: Candidate.Contact,\r\n            Designation: Candidate.Designation,\r\n            Experience: Candidate.Experience,\r\n            Profile: Candidate.Profile,\r\n            Reason_For_Leaving: Candidate.Reason_For_Leaving,\r\n            Source: Candidate.Source,\r\n            Interview_Schedule: Candidate.Interview_Schedule,\r\n            Date_Of_Joining: Candidate.Date_Of_Joining,\r\n            Hiring_Status: Candidate.Hiring_Status,\r\n            Comment: Candidate.Comment,\r\n            Notice_Period: Candidate.Notice_Period,\r\n            Ready_To_Relocate: Candidate.Ready_To_Relocate,\r\n            Communication: Candidate.Communication,\r\n            Current_CTC: Candidate.Current_CTC,\r\n            Current_Location: Candidate.Current_Location,\r\n            Expected_CTC: Candidate.Expected_CTC,\r\n            College_Name: Candidate.College_Name,\r\n            ModifiedBy: loggedInUser._id,\r\n            _id: CandidateId,\r\n            Resume: \"\",\r\n          });\r\n          setLoading(false);\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke!\");\r\n        }\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"CandidateId\", CandidateId);\r\n    (async function execPreLoadFunctions() {\r\n      // await getRoles();\r\n      // await getReportingManagers();\r\n      if (CandidateId) {\r\n        await getCandidateById(CandidateId);\r\n        setViewOnly(false);\r\n      } else {\r\n        setLoading(false);\r\n        setViewOnly(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\r\n    try {\r\n      console.log(\"handle called\");\r\n      if (CandidateId) {\r\n        const candidate: ICandidate = {\r\n          Name: values.Name,\r\n          DOB: values.DOB,\r\n          Email: values.Email,\r\n          Skills: values.Skills,\r\n          Contact: values.Contact,\r\n          Designation: values.Designation,\r\n          Experience: values.Experience,\r\n          Profile: values.Profile,\r\n          Reason_For_Leaving: values.Reason_For_Leaving,\r\n          Source: values.Source,\r\n          Interview_Schedule: values.Interview_Schedule,\r\n          Date_Of_Joining: values.Date_Of_Joining,\r\n          Hiring_Status: values.Hiring_Status,\r\n          Comment: values.Comment,\r\n          Notice_Period: values.Notice_Period,\r\n          Ready_To_Relocate: values.Ready_To_Relocate,\r\n          Communication: values.Communication,\r\n          Current_CTC: values.Current_CTC,\r\n          Current_Location: values.Current_Location,\r\n          Expected_CTC: values.Expected_CTC,\r\n          College_Name: values.College_Name,\r\n          ModifiedBy: loggedInUser._id,\r\n          Resume: \"\",\r\n          _id: CandidateId,\r\n        };\r\n        console.log(\"candidate\", candidate);\r\n        const response = await updateCandidateByIdRequest(\r\n          CandidateId,\r\n          candidate\r\n        );\r\n        console.log(\"response submit\", response.status);\r\n        if (response && response.status === true) {\r\n          props.history.push(manageCandidatePath);\r\n        } else if (response.status == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          console.log(\"response submit\", response.status);\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      } else {\r\n        const candidate: ICandidate = {\r\n          Name: values.Name,\r\n          DOB: values.DOB,\r\n          Email: values.Email,\r\n          Skills: values.Skills,\r\n          Contact: values.Contact,\r\n          Designation: values.Designation,\r\n          Experience: values.Experience,\r\n          Profile: values.Profile,\r\n          Reason_For_Leaving: values.Reason_For_Leaving,\r\n          Source: values.Source,\r\n          Interview_Schedule: values.Interview_Schedule,\r\n          Date_Of_Joining: values.Date_Of_Joining,\r\n          Hiring_Status: values.Hiring_Status,\r\n          Comment: values.Comment,\r\n          Notice_Period: values.Notice_Period,\r\n          Ready_To_Relocate: values.Ready_To_Relocate,\r\n          Communication: values.Communication,\r\n          Current_CTC: values.Current_CTC,\r\n          Current_Location: values.Current_Location,\r\n          Expected_CTC: values.Expected_CTC,\r\n          College_Name: values.College_Name,\r\n          ModifiedBy: loggedInUser._id,\r\n          _id: \"\",\r\n          Resume: \"\",\r\n        };\r\n        console.log(\"candidate\", candidate);\r\n        const response = await addCandidateByIdRequest(candidate);\r\n        if (response && response.status === true) {\r\n          snackbarAlert.success(\"Candidate added successfully!\");\r\n          resetForm();\r\n        } else if (response.Status.ResponseCode == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    Name: Yup.string()\r\n      .min(3, \"Name should be minimum 3 characters!\")\r\n      .max(100, \"Name should be maximum 100 characters!\")\r\n      .required(\"Name is required!\"),\r\n    Email: Yup.string()\r\n      .email(\"Must be a valid email!\")\r\n      .max(100, \"Email should be maximum 100 characters!\")\r\n      .required(\"Email is required!\"),\r\n    DOB: Yup.string()\r\n      .required(\"Date of Birth is required!\" ), \r\n    Skills: Yup.string()\r\n         .required(\"Skills are required\"),\r\n    Contact: Yup.string()\r\n      .min(10, \"Phone number should be 10 digits!\")\r\n      .max(10, \"Phone number should be 10 digits!\")\r\n      .matches(NumbersRegExp, \"Must be a valid phone number!\")\r\n      .required(\"Phone number is required!\"),\r\n    Designation: Yup.string()\r\n      .min(5, \"designation should have minimum 5 charaters!\")\r\n      .max(100,\"designation should have maximum 100 charater!\")\r\n      .required(\"designation should required\"),  \r\n    Experience: Yup.string()\r\n      .required(\"Experience is required\"),\r\n    Profile: Yup.string()\r\n      .required(\"Profile is required\"),\r\n    Reason_For_Leaving: Yup.string()\r\n      .required(\"Reason for leaving is required\"),\r\n    Source: Yup.string()\r\n      .required(\"Source is required\"),\r\n    Interview_Schedule: Yup.string()\r\n       .required(\"schedule for interview is required\"),\r\n    Date_Of_Joining: Yup.string()\r\n       .required(\"joining date is required\"),\r\n    Hiring_Status: Yup.string()\r\n       .required(\"hiring status is required\"),   \r\n    Comment: Yup.string()\r\n       .required(\"comment is required\"),\r\n    Notice_Period: Yup.string()\r\n       .required(\"notice period is required\"),\r\n    Ready_To_Relocate: Yup.string()\r\n       .required(\"ready to relocate is required\"),\r\n    Communication: Yup.string()\r\n      .min(3, \"should be minimum 3 charaters\")\r\n      .max(100, \"communication should have maximun 100 charaters!\")\r\n      .required(\"communication is required\"),           \r\n    Current_CTC: Yup.string()\r\n      .required(\"current CTC is required\"),\r\n    Current_Location: Yup.string()\r\n       .required(\"current location is required\"),  \r\n    Expected_CTC: Yup.string()\r\n      .required(\"expected ctc is required\"),\r\n    College_Name: Yup.string()\r\n       .min(10,\"college name should be 10 charaters!\")  \r\n       .max(100,\"college name should be 100 charaters!\")\r\n       .required(\"college name is required\"),\r\n    Resume: Yup.string()\r\n      .required(\"resume is required\")    \r\n  });\r\n\r\n  return (\r\n    <DashboardPage\r\n      title={\r\n        CandidateId\r\n          ? \"Manage Candidates | Edit Candidate\"\r\n          : \"Manage Candidates | Add Candidate\"\r\n      }\r\n    >\r\n      {!loading ? (\r\n        <Box className={classes.mainBox}>\r\n          <Formik\r\n            enableReinitialize={true}\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              errors,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              touched,\r\n              values,\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Card>\r\n                  <CardHeader\r\n                    subheader={\r\n                      CandidateId\r\n                        ? \"Please change the below details to update candidate.\"\r\n                        : \"Please fill the below details to add candidate.\"\r\n                    }\r\n                    title={CandidateId ? \"Edit Candidate\" : \"Add Candidate\"}\r\n                    style={{ textAlign: \"center\" }}\r\n                    titleTypographyProps={{ variant: \"h3\", component: \"h3\" }}\r\n                  />\r\n                  <Divider />\r\n                  <Box p={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Name\"\r\n                          name=\"Name\"\r\n                          value={values.Name}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Name && errors.Name)}\r\n                          helperText={touched.Name && errors.Name}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"DOB\"\r\n                          variant=\"outlined\"\r\n                          value={values.DOB}\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.DOB && errors.DOB)}\r\n                          helperText={touched.DOB && errors.DOB}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Designation\"\r\n                          name=\"Designation\"\r\n                          value={values.Designation}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Designation && errors.Designation\r\n                          )}\r\n                          helperText={touched.Designation && errors.Designation}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Email\"\r\n                          name=\"Email\"\r\n                          type=\"Email\"\r\n                          value={values.Email}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Email && errors.Email)}\r\n                          helperText={touched.Email && errors.Email}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Skills\"\r\n                          name=\"Skills\"\r\n                          variant=\"outlined\"\r\n                          value={values.Skills}\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          helperText={touched.Skills && errors.Skills}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Contact\"\r\n                          name=\"Contact\"\r\n                          value={values.Contact}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 10 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Contact && errors.Contact)}\r\n                          helperText={touched.Contact && errors.Contact}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Experience\"\r\n                          name=\"Experience\"\r\n                          value={values.Experience}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Experience && errors.Experience\r\n                          )}\r\n                          helperText={touched.Experience && errors.Experience}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Profile\"\r\n                          name=\"Profile\"\r\n                          value={values.Profile}\r\n                          variant=\"outlined\"\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Profile && errors.Profile)}\r\n                          helperText={touched.Profile && errors.Profile}\r\n                        >\r\n                          <option key=\"-1\" value=\"\">\r\n                            - None -\r\n                          </option>\r\n                          {roles.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.RoleName}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Reason For Leaveing\"\r\n                          name=\"Reason_For_Leaving\"\r\n                          value={values.Reason_For_Leaving}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Reason_For_Leaving &&\r\n                              errors.Reason_For_Leaving\r\n                          )}\r\n                          helperText={\r\n                            touched.Reason_For_Leaving &&\r\n                            errors.Reason_For_Leaving\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Source\"\r\n                          name=\"Source\"\r\n                          value={values.Source}\r\n                          variant=\"outlined\"\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Source && errors.Source)}\r\n                          helperText={touched.Source && errors.Source}\r\n                        >\r\n                          <option value=\"\">- None -</option>\r\n                          {reportingmanagers.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.Name}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Interview Schedule\"\r\n                          name=\"Interview_Schedule\"\r\n                          value={values.Interview_Schedule}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Interview_Schedule &&\r\n                              errors.Interview_Schedule\r\n                          )}\r\n                          helperText={\r\n                            touched.Interview_Schedule &&\r\n                            errors.Interview_Schedule\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Date Of Joining\"\r\n                          name=\"Date_Of_Joining\"\r\n                          value={values.Date_Of_Joining}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Date_Of_Joining && errors.Date_Of_Joining\r\n                          )}\r\n                          helperText={\r\n                            touched.Date_Of_Joining && errors.Date_Of_Joining\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Hiring Status\"\r\n                          name=\"Hiring_Status\"\r\n                          value={values.Hiring_Status}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Hiring_Status && errors.Hiring_Status\r\n                          )}\r\n                          helperText={\r\n                            touched.Hiring_Status && errors.Hiring_Status\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Comment\"\r\n                          name=\"Comment\"\r\n                          value={values.Comment}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Comment && errors.Comment)}\r\n                          helperText={touched.Comment && errors.Comment}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Notice Period\"\r\n                          name=\"Notice_Period\"\r\n                          value={values.Notice_Period}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Notice_Period && errors.Notice_Period\r\n                          )}\r\n                          helperText={\r\n                            touched.Notice_Period && errors.Notice_Period\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Ready To Relocate\"\r\n                          name=\"Ready_To_Relocate\"\r\n                          value={values.Ready_To_Relocate}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Ready_To_Relocate &&\r\n                              errors.Ready_To_Relocate\r\n                          )}\r\n                          helperText={\r\n                            touched.Ready_To_Relocate &&\r\n                            errors.Ready_To_Relocate\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Communication\"\r\n                          name=\"Communication\"\r\n                          value={values.Communication}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Communication && errors.Communication\r\n                          )}\r\n                          helperText={\r\n                            touched.Communication && errors.Communication\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Current CTC\"\r\n                          name=\"Current_CTC\"\r\n                          value={values.Current_CTC}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Current_CTC && errors.Current_CTC\r\n                          )}\r\n                          helperText={touched.Current_CTC && errors.Current_CTC}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Current Location\"\r\n                          name=\"Current_Location\"\r\n                          value={values.Current_Location}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Current_Location && errors.Current_Location\r\n                          )}\r\n                          helperText={\r\n                            touched.Current_Location && errors.Current_Location\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Expected CTC\"\r\n                          name=\"Expected_CTC\"\r\n                          value={values.Expected_CTC}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.Expected_CTC && errors.Expected_CTC\r\n                          )}\r\n                          helperText={\r\n                            touched.Expected_CTC && errors.Expected_CTC\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"College Name\"\r\n                          name=\"College_Name\"\r\n                          value={values.College_Name}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.College_Name && errors.College_Name\r\n                          )}\r\n                          helperText={\r\n                            touched.College_Name && errors.College_Name\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          disabled={viewOnly}\r\n                          label=\"Resume\"\r\n                          name=\"Resume\"\r\n                          value={values.Resume}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.Resume && errors.Resume)}\r\n                          helperText={touched.Resume && errors.Resume}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box display=\"flex\" justifyContent=\"center\" p={1}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      disabled={viewOnly}\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                    >\r\n                      {isSubmitting\r\n                        ? \"Please wait...\"\r\n                        : CandidateId\r\n                        ? \"Update\"\r\n                        : \"Add\"}\r\n                    </Button>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      size=\"large\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      href={manageCandidatePath}\r\n                    >\r\n                      {CandidateId ? \"Cancel\" : \"Back\"}\r\n                    </Button>\r\n                  </Box>\r\n                </Card>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </DashboardPage>\r\n  );\r\n};\r\nexport default AddCandidate;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\ManageCandidate.tsx",["244","245","246","247","248","249","250","251","252","253","254","255"],"import { useContext, useState, useEffect } from \"react\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Grid,\r\n  InputAdornment,\r\n  SvgIcon,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {\r\n  GridColDef,\r\n  GridCellParams,\r\n  GridValueGetterParams,\r\n  GridValueFormatterParams,\r\n} from \"@material-ui/data-grid\";\r\nimport {\r\n  getCandidateRequest,\r\n  deleteUserRequest,\r\n} from \"../../../services/Admin\";\r\nimport SessionContext from \"../../../context/SessionContext\";\r\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\r\nimport { ICandidate } from \"../../../classes/IUser\";\r\nimport { IUserDropdown, IUserShort } from \"../../../classes/IUserShort\";\r\nimport IRole from \"../../../classes/IRole\";\r\nimport ILoginUser from \"../../../classes/ILoginUser\";\r\nimport getInitials from \"../../../utils/getInitials\";\r\nimport moment from \"moment\";\r\nimport DashboardPage from \"../../Page/DashboardPage\";\r\nimport GridView from \"../../DataGrid\";\r\nimport DialogBox from \"../../DialogBox\";\r\nimport snackbarAlert from \"../../SnackbarAlert\";\r\nimport Spinner from \"../../Spinner\";\r\nimport ViewDialogBox from \"../../DialogBox/ViewDialogBox\";\r\nimport ViewCandidate from \"./ViewCandidate\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mbottom: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  avatar: {\r\n    cursor: \"pointer\",\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n}));\r\n\r\nlet filters = {\r\n  SourceId: \"\",\r\n  ProfileId: \"\",\r\n  SearchStr: \"\",\r\n};\r\n\r\nconst ManageCandidate = () => {\r\n  const classes = useStyles();\r\n  const loggedInUser = useContext(SessionContext).user as ILoginUser;\r\n\r\n  const initialDialogState = {\r\n    open: false,\r\n    title: \"Delete User\",\r\n    description: <>Are you sure you want to delete this user?</>,\r\n    UserId: \"\",\r\n  };\r\n\r\n  const initialViewDialogState = {\r\n    open: false,\r\n    title: \"View Candidate\",\r\n    content: null,\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [rows, setRows] = useState([] as ICandidate[]);\r\n  const [originalData, setOriginalData] = useState([] as ICandidate[]);\r\n  const [roles, setRoles] = useState([] as IRole[]);\r\n  const [reportingmanagers, setReportingManagers] = useState(\r\n    [] as IUserDropdown[]\r\n  );\r\n  const [submmitting, setSubmmitting] = useState(false);\r\n  const [dialog, setDialog] = useState(initialDialogState);\r\n  const [viewDialog, setViewDialog] = useState(initialViewDialogState);\r\n\r\n  const addCandidatePath = PROJECT_PATHS.HiringManager.find(\r\n    (x) => x.pagename === \"addcandidate\"\r\n  )?.path as string;\r\n\r\n  const editCandidatePath = PROJECT_PATHS.HiringManager.find(\r\n    (x) => x.pagename === \"editcandidate\"\r\n  )?.path as string;\r\n\r\n  const SOURCE = [\r\n    { key: \"Indeed\", value: \"Indeed\" },\r\n    { key: \"Angel.Co\", value: \"Angel.Co\" },\r\n    { key: \"LinkedIn\", value: \"Linkedin\" },\r\n    { key: \"Hirect\", value: \"Hirect\" },\r\n    { key: \"Newton\", value: \"Newton\" },\r\n    { key: \"FunctionUp\", value: \"FunctionUp\" },\r\n    { key: \"Referrals\", value: \"Referrals\" },\r\n    { key: \"Website\", value: \"Website\" },\r\n    { key: \"Others\", value: \"Others\" },\r\n  ];\r\n  const PROFILES = [\r\n    { key: \"UI/UX Designer\", value: \"UI/UX Designer\" },\r\n    { key: \"UI Developer\", value: \"UI Developer\" },\r\n    { key: \"FullStack\", value: \"FullStack\" },\r\n    { key: \"DevOps\", value: \"DevOps\" },\r\n    { key: \".NET\", value: \".NET\" },\r\n    { key: \"PHP\", value: \"PHP\" },\r\n    { key: \"BDE\", value: \"BDE\" },\r\n    { key: \"Blockchain Developer\", value: \"Blockchain Developer\" },\r\n  ];\r\n  const columns: GridColDef[] = [\r\n    // {\r\n    //   field: \"Photo\",\r\n    //   headerName: \"Photo\",\r\n    //   headerAlign: \"center\",\r\n    //   cellClassName: \"text-center\",\r\n    //   width: 70,\r\n    //   sortable: false,\r\n    //   renderCell: (params: GridCellParams) => (\r\n    //     <Avatar className={classes.avatar} src={params.row.ProfilePhoto}>\r\n    //       {getInitials(params.row.FirstName + \" \" + params.row.LastName)}\r\n    //     </Avatar>\r\n    //   ),\r\n    // },\r\n    {\r\n      field: \"Name\",\r\n      headerName: \"Name\",\r\n      width: 110,\r\n      // valueGetter: (params: GridValueGetterParams) => `${params.row.Name}`,\r\n      renderCell: (params: GridCellParams) => (\r\n        <Button\r\n          variant=\"text\"\r\n          style={{\r\n            fontWeight: \"normal\",\r\n            textTransform: \"unset\",\r\n            padding: 0,\r\n          }}\r\n          onClick={() => showViewDialogBox(params.row)}\r\n        >\r\n          {params.row.Name}\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      field: \"Email\",\r\n      headerName: \"Email\",\r\n      width: 110,\r\n    },\r\n    {\r\n      field: \"Contact\",\r\n      headerName: \"Contact\",\r\n      width: 110,\r\n    },\r\n    {\r\n      field: \"Skills\",\r\n      headerName: \"Skills\",\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"Source\",\r\n      headerName: \"Source\",\r\n      width: 100,\r\n      valueGetter: (params: GridValueGetterParams) => `${params.row.Source}`,\r\n    },\r\n\r\n    {\r\n      field: \"Profile\",\r\n      headerName: \"Profile\",\r\n      width: 125,\r\n      headerClassName: \"text-left\",\r\n      valueFormatter: (params: GridValueFormatterParams) =>\r\n        `${params.row.Profile}`,\r\n    },\r\n  ];\r\n\r\n  if (\r\n    loggedInUser.Role.RoleName.toUpperCase() === \"ADMIN\" ||\r\n    loggedInUser.Role.RoleName.toUpperCase() === \"HIRING MANAGER\"\r\n  ) {\r\n    columns.push({\r\n      field: \" \",\r\n      headerName: \" \",\r\n      cellClassName: \"text-center\",\r\n      width: 120,\r\n      sortable: false,\r\n      renderCell: (params: GridCellParams) => (\r\n        <>\r\n          {(loggedInUser.Role.RoleName.toUpperCase() === \"ADMIN\" ||\r\n            loggedInUser.Role.RoleName.toUpperCase() === \"HIRING MANAGER\") && (\r\n            <IconButton\r\n              size=\"small\"\r\n              className=\"gridbutton btnEdit\"\r\n              aria-label=\"edit\"\r\n              disabled={submmitting}\r\n              href={editCandidatePath.replace(\":id\", `${params.row._id}`)}\r\n            >\r\n              <EditIcon />\r\n            </IconButton>\r\n          )}\r\n          {(loggedInUser.Role.RoleName.toUpperCase() === \"ADMIN\" ||\r\n            loggedInUser.Role.RoleName.toUpperCase() === \"HIRING MANAGER\") && (\r\n            <IconButton\r\n              size=\"small\"\r\n              className=\"gridbutton btnDelete\"\r\n              aria-label=\"delete\"\r\n              disabled={submmitting}\r\n              onClick={() =>\r\n                showDialogBox(`${params.row._id}`, `${params.row.Name}`)\r\n              }\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          )}\r\n        </>\r\n      ),\r\n    });\r\n  }\r\n  const convertTime24to12 = (time: string) => {\r\n    let convertedTime: string = time;\r\n    if (time) {\r\n      let [hours, minutes] = time.split(\":\").map(Number);\r\n\r\n      const AmOrPm = hours >= 12 ? \"PM\" : \"AM\";\r\n      hours = hours % 12 || 12;\r\n\r\n      convertedTime =\r\n        (hours < 10 ? \"0\" + hours : hours) +\r\n        \":\" +\r\n        (minutes < 10 ? \"0\" + minutes : minutes) +\r\n        \" \" +\r\n        AmOrPm;\r\n    }\r\n    return convertedTime;\r\n  };\r\n\r\n  const showDialogBox = (UserId: string, Name: string) => {\r\n    let popupdesc = (\r\n      <>\r\n        Are you sure you want to delete this Candidate - <b>\"{Name}\"</b>?\r\n      </>\r\n    );\r\n    setDialog({\r\n      ...dialog,\r\n      open: true,\r\n      description: popupdesc,\r\n      UserId: UserId,\r\n    });\r\n  };\r\n\r\n  const closeDialogBox = () => {\r\n    setDialog({\r\n      ...dialog,\r\n      open: false,\r\n      UserId: \"\",\r\n    });\r\n  };\r\n\r\n  const showViewDialogBox = (candidate: any) => {\r\n    setViewDialog({\r\n      ...viewDialog,\r\n      open: true,\r\n      content: candidate,\r\n    });\r\n  };\r\n\r\n  const closeViewDialogBox = () => {\r\n    setViewDialog({\r\n      ...viewDialog,\r\n      open: false,\r\n    });\r\n  };\r\n\r\n  // const getRoles = async () => {\r\n  //   try {\r\n  //     const response = await getRolesRequest();\r\n  //     if (response && response.Status.ResponseCode == 200) {\r\n  //       const drp_roles: IRole[] = response.Roles;\r\n  //       setRoles(drp_roles);\r\n  //     } else {\r\n  //       snackbarAlert.error(\"Oops! Something Broke!\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     snackbarAlert.error(\"Oops! Something Broke!\");\r\n  //   }\r\n  // };\r\n\r\n  // const getReportingManagers = async () => {\r\n  //   try {\r\n  //     const response = await getReportingManagersRequest();\r\n  //     if (response && response.Status.ResponseCode == 200) {\r\n  //       const drp_users: IUserDropdown[] = response.Users;\r\n  //       setReportingManagers(drp_users);\r\n  //     } else {\r\n  //       snackbarAlert.error(\"Oops! Something Broke!\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     snackbarAlert.error(\"Oops! Something Broke!\");\r\n  //   }\r\n  // };\r\n\r\n  const getCandidate = async () => {\r\n    try {\r\n      const response = await getCandidateRequest();\r\n\r\n      if (response) {\r\n        console.log(\"cand response\", response.Data);\r\n        const gridrows = response.Data;\r\n        setRows(gridrows);\r\n        setOriginalData(gridrows);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const deleteUser = async () => {\r\n    try {\r\n      const UserId = dialog.UserId;\r\n      if (UserId) {\r\n        const response = await deleteUserRequest(UserId);\r\n        if (response && response.Status.ResponseCode == 200) {\r\n          // await getReportingManagers();\r\n          await getCandidate();\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke!\");\r\n        }\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n    setSubmmitting(false);\r\n    closeDialogBox();\r\n  };\r\n\r\n  const handleSearchChange = () => {\r\n    let gridrows = originalData;\r\n\r\n    if (filters.ProfileId) {\r\n      gridrows = gridrows.filter((item) => item.Profile === filters.ProfileId);\r\n    }\r\n\r\n    if (filters.SourceId) {\r\n      gridrows = gridrows.filter((item) => item.Source === filters.SourceId);\r\n    }\r\n\r\n    if (filters.SearchStr) {\r\n      gridrows = gridrows.filter((item) => {\r\n        // item.Name.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) >\r\n        //   -1 ||\r\n        if (\r\n          item.Name.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) > -1\r\n        )\r\n          return true;\r\n\r\n        if (\r\n          item.Skills &&\r\n          item.Skills.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) >\r\n            -1\r\n        )\r\n          return true;\r\n\r\n        if (\r\n          item.Email &&\r\n          item.Email.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) > -1\r\n        )\r\n          return true;\r\n\r\n        if (\r\n          item.Designation &&\r\n          item.Designation.toLowerCase().indexOf(\r\n            filters.SearchStr.toLowerCase()\r\n          ) > -1\r\n        )\r\n          return true;\r\n\r\n        if (\r\n          item.Current_Location &&\r\n          item.Current_Location.toLowerCase().indexOf(\r\n            filters.SearchStr.toLowerCase()\r\n          ) > -1\r\n        )\r\n          return true;\r\n\r\n        if (\r\n          item.College_Name &&\r\n          item.College_Name.toLowerCase().indexOf(\r\n            filters.SearchStr.toLowerCase()\r\n          ) > -1\r\n        )\r\n          return true;\r\n      });\r\n    }\r\n    setRows(gridrows);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"loggedInUser\", loggedInUser);\r\n    (async function execPreLoadFunctions() {\r\n      // await getRoles();\r\n      // await getReportingManagers();\r\n      await getCandidate();\r\n      setLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardPage title=\"Manage Candidates\">\r\n      {!loading ? (\r\n        <>\r\n          <Box mt={2}>\r\n            <Grid container spacing={2}>\r\n              <Grid\r\n                item\r\n                md={3}\r\n                sm={6}\r\n                xs={12}\r\n                className={classes.mbottom}\r\n                style={{ textAlign: \"left\" }}\r\n              >\r\n                {(loggedInUser.Role.RoleName.toUpperCase() === \"ADMIN\" ||\r\n                  loggedInUser.Role.RoleName.toUpperCase() ===\r\n                    \"HIRING MANAGER\") && (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    startIcon={<AddIcon />}\r\n                    href={addCandidatePath}\r\n                  >\r\n                    Add Candidate\r\n                  </Button>\r\n                )}\r\n              </Grid>\r\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\r\n                <TextField\r\n                  select\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  label=\"Select Source\"\r\n                  variant=\"outlined\"\r\n                  SelectProps={{ native: true }}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  onChange={(e) => {\r\n                    filters.SourceId = e.target.value;\r\n                    handleSearchChange();\r\n                  }}\r\n                >\r\n                  <option key=\"-1\" value=\"\">\r\n                    - None -\r\n                  </option>\r\n                  {SOURCE.map((option) => (\r\n                    <option key={option.key} value={option.value}>\r\n                      {option.value}\r\n                    </option>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\r\n                <TextField\r\n                  select\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  label=\"Select Profile\"\r\n                  variant=\"outlined\"\r\n                  SelectProps={{ native: true }}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  onChange={(e) => {\r\n                    filters.ProfileId = e.target.value;\r\n                    handleSearchChange();\r\n                  }}\r\n                >\r\n                  <option key=\"-1\" value=\"\">\r\n                    - None -\r\n                  </option>\r\n                  {PROFILES.map((option) => (\r\n                    <option key={option.key} value={option.value}>\r\n                      {option.value}\r\n                    </option>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\r\n                <TextField\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  placeholder=\"Search...\"\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SvgIcon fontSize=\"small\" color=\"disabled\">\r\n                          <SearchIcon />\r\n                        </SvgIcon>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    filters.SearchStr = e.target.value;\r\n                    handleSearchChange();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          <Card>\r\n            <PerfectScrollbar>\r\n              <Box minWidth={1170}>\r\n                <GridView columns={columns} rows={rows} />\r\n              </Box>\r\n            </PerfectScrollbar>\r\n            <DialogBox\r\n              open={dialog.open}\r\n              title={dialog.title}\r\n              description={dialog.description}\r\n              isSubmitting={submmitting}\r\n              onDialogAction={(isAgree: boolean) => {\r\n                if (isAgree) {\r\n                  setSubmmitting(true);\r\n                  deleteUser();\r\n                } else {\r\n                  closeDialogBox();\r\n                }\r\n              }}\r\n            />\r\n            <ViewDialogBox\r\n              open={viewDialog.open}\r\n              title={viewDialog.title}\r\n              content={\r\n                viewDialog.content ? (\r\n                  <ViewCandidate candidate={viewDialog.content} />\r\n                ) : (\r\n                  <></>\r\n                )\r\n              }\r\n              onDialogClose={closeViewDialogBox}\r\n            />\r\n          </Card>\r\n        </>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </DashboardPage>\r\n  );\r\n};\r\n\r\nexport default ManageCandidate;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\User\\AddUser.tsx",["256","257","258","259","260","261","262","263"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  getRolesRequest,\r\n  getReportingManagersRequest,\r\n  getUserByIdRequest,\r\n  registerUserRequest,\r\n  updateUserRequest,\r\n} from \"../../../services/Admin\";\r\nimport { IUserDropdown } from \"../../../classes/IUserShort\";\r\nimport IRole from \"../../../classes/IRole\";\r\nimport { IUser, IRegisterUser, IUpdateUser } from \"../../../classes/IUser\";\r\nimport ILoginUser from \"../../../classes/ILoginUser\";\r\nimport { PROJECT_PATHS, NumbersRegExp } from \"../../../shared/constants\";\r\nimport DashboardPage from \"../../Page/DashboardPage\";\r\nimport SessionContext from \"../../../context/SessionContext\";\r\nimport snackbarAlert from \"../../SnackbarAlert\";\r\nimport Spinner from \"../../Spinner\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mainBox: {\r\n    maxWidth: 800,\r\n    margin: \"16px auto 0\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport interface IFormValues {\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  password?: string;\r\n  phone: number | \"\";\r\n  employeecode: string;\r\n  designation: string;\r\n  role: string;\r\n  reportingmanager: string;\r\n}\r\n\r\nconst AddUser = (props: any) => {\r\n  const classes = useStyles();\r\n  const loggedInUser = useContext(SessionContext).user as ILoginUser;\r\n  const UserId = props.match.params.id;\r\n  const manageUserPath = PROJECT_PATHS.Admin.find(\r\n    (x) => x.pagename === \"viewusers\"\r\n  )?.path as string;\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [roles, setRoles] = useState([] as IRole[]);\r\n  const [reportingmanagers, setReportingManagers] = useState(\r\n    [] as IUserDropdown[]\r\n  );\r\n  const [editableUser, setEditableUser] = useState(\r\n    undefined as IUser | undefined\r\n  );\r\n  const [initialValues, setInitialValues] = useState({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    phone: \"\",\r\n    employeecode: \"\",\r\n    designation: \"\",\r\n    role: \"\",\r\n    reportingmanager: \"\",\r\n  } as IFormValues);\r\n\r\n  const getRoles = async () => {\r\n    try {\r\n      const response = await getRolesRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_roles: IRole[] = response.Roles;\r\n        setRoles(drp_roles);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getReportingManagers = async () => {\r\n    try {\r\n      const response = await getReportingManagersRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_users: IUserDropdown[] = response.Users;\r\n        setReportingManagers(drp_users);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getUserById = async (UserId: string) => {\r\n    try {\r\n      const response = await getUserByIdRequest(UserId);\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const User: IUser | undefined = response.User;\r\n        if (\r\n          User &&\r\n          (loggedInUser.IsHost ||\r\n            (loggedInUser.IsSuperAdmin && !User.IsSuperAdmin) ||\r\n            loggedInUser._id === User._id ||\r\n            loggedInUser._id === User.CreatedBy ||\r\n            User.Role.RoleName.toLowerCase() !== \"admin\")\r\n        ) {\r\n          setEditableUser(User);\r\n          setInitialValues({\r\n            firstname: User.FirstName,\r\n            lastname: User.LastName,\r\n            email: User.Email,\r\n            phone: User.Phone,\r\n            employeecode: User.EmployeeCode,\r\n            designation: User.Designation,\r\n            role: User.Role._id,\r\n            reportingmanager: User.ReportingManager._id,\r\n          });\r\n          setLoading(false);\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke!\");\r\n        }\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function execPreLoadFunctions() {\r\n      await getRoles();\r\n      await getReportingManagers();\r\n      if (UserId) {\r\n        await getUserById(UserId);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\r\n    try {\r\n      if (UserId) {\r\n        const user: IUpdateUser = {\r\n          FirstName: values.firstname,\r\n          LastName: values.lastname,\r\n          Phone: values.phone as number,\r\n          Email: values.email,\r\n          EmployeeCode: values.employeecode,\r\n          Designation: values.designation,\r\n          RoleId: values.role,\r\n          ReportingManagerId: values.reportingmanager,\r\n          ModifiedBy: loggedInUser._id,\r\n        };\r\n        const response = await updateUserRequest(UserId, user);\r\n        if (response && response.Status.ResponseCode == 200) {\r\n          props.history.push(manageUserPath);\r\n        } else if (response.Status.ResponseCode == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      } else {\r\n        const user: IRegisterUser = {\r\n          FirstName: values.firstname,\r\n          LastName: values.lastname,\r\n          Phone: values.phone as number,\r\n          Email: values.email,\r\n          Password: values.password as string,\r\n          EmployeeCode: values.employeecode,\r\n          Designation: values.designation,\r\n          RoleId: values.role,\r\n          ReportingManagerId: values.reportingmanager,\r\n          CreatedBy: loggedInUser._id,\r\n        };\r\n        const response = await registerUserRequest(user);\r\n        if (response && response.Status.ResponseCode == 200) {\r\n          snackbarAlert.success(\"User registered successfully!\");\r\n          resetForm();\r\n        } else if (response.Status.ResponseCode == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    firstname: Yup.string()\r\n      .min(2, \"First name should be minimum 2 characters!\")\r\n      .max(100, \"First name should be maximum 100 characters!\")\r\n      .required(\"First name is required!\"),\r\n    lastname: Yup.string()\r\n      .min(2, \"Last name should be minimum 2 characters!\")\r\n      .max(100, \"Last name should be maximum 100 characters!\")\r\n      .required(\"Last name is required!\"),\r\n    email: Yup.string()\r\n      .email(\"Must be a valid email!\")\r\n      .max(100, \"Email should be maximum 100 characters!\")\r\n      .required(\"Email is required!\"),\r\n    password: !UserId\r\n      ? Yup.string()\r\n          .min(7, \"Password should be minimum 7 characters!\")\r\n          .max(100, \"Password should be maximum 100 characters!\")\r\n          .required(\"Password is required!\")\r\n      : Yup.string(),\r\n    phone: Yup.string()\r\n      .min(10, \"Phone number should be 10 digits!\")\r\n      .max(10, \"Phone number should be 10 digits!\")\r\n      .matches(NumbersRegExp, \"Must be a valid phone number!\")\r\n      .required(\"Phone number is required!\"),\r\n    employeecode: Yup.string()\r\n      .max(100, \"Employee code should be maximum 100 characters!\")\r\n      .required(\"Employee code is required!\"),\r\n    designation: Yup.string()\r\n      .max(100, \"Designation should be maximum 100 characters!\")\r\n      .required(\"Designation is required!\"),\r\n    role: Yup.string().required(\"Role is required!\"),\r\n    reportingmanager: Yup.string().required(\"Reporting manager is required!\"),\r\n  });\r\n\r\n  return (\r\n    <DashboardPage\r\n      title={\r\n        UserId ? \"Manage Users | Edit User\" : \"Manage Users | Register User\"\r\n      }\r\n    >\r\n      {!loading ? (\r\n        <Box className={classes.mainBox}>\r\n          <Formik\r\n            enableReinitialize={true}\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              errors,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              touched,\r\n              values,\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Card>\r\n                  <CardHeader\r\n                    subheader={\r\n                      UserId\r\n                        ? \"Please change the below details to update user.\"\r\n                        : \"Please fill the below details to register user.\"\r\n                    }\r\n                    title={UserId ? \"Edit User\" : \"Register User\"}\r\n                    style={{ textAlign: \"center\" }}\r\n                    titleTypographyProps={{ variant: \"h3\", component: \"h3\" }}\r\n                  />\r\n                  <Divider />\r\n                  <Box p={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"First Name\"\r\n                          name=\"firstname\"\r\n                          value={values.firstname}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.firstname && errors.firstname)}\r\n                          helperText={touched.firstname && errors.firstname}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Last Name\"\r\n                          name=\"lastname\"\r\n                          value={values.lastname}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.lastname && errors.lastname)}\r\n                          helperText={touched.lastname && errors.lastname}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Email\"\r\n                          name=\"email\"\r\n                          type=\"email\"\r\n                          value={values.email}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.email && errors.email)}\r\n                          helperText={touched.email && errors.email}\r\n                        />\r\n                      </Grid>\r\n                      {!UserId && (\r\n                        <Grid item md={6} sm={6} xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={values.password}\r\n                            variant=\"outlined\"\r\n                            inputProps={{ maxLength: 100 }}\r\n                            onBlur={handleBlur}\r\n                            onChange={handleChange}\r\n                            error={Boolean(touched.password && errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Phone Number\"\r\n                          name=\"phone\"\r\n                          value={values.phone}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 10 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.phone && errors.phone)}\r\n                          helperText={touched.phone && errors.phone}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Employee Code\"\r\n                          name=\"employeecode\"\r\n                          value={values.employeecode}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.employeecode && errors.employeecode\r\n                          )}\r\n                          helperText={\r\n                            touched.employeecode && errors.employeecode\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Designation\"\r\n                          name=\"designation\"\r\n                          value={values.designation}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.designation && errors.designation\r\n                          )}\r\n                          helperText={touched.designation && errors.designation}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          select\r\n                          fullWidth\r\n                          label=\"Select Role\"\r\n                          name=\"role\"\r\n                          value={values.role}\r\n                          variant=\"outlined\"\r\n                          disabled={\r\n                            editableUser &&\r\n                            editableUser.Role.RoleName.toLowerCase() ===\r\n                              \"admin\" &&\r\n                            editableUser._id === loggedInUser._id\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.role && errors.role)}\r\n                          helperText={touched.role && errors.role}\r\n                        >\r\n                          <option key=\"-1\" value=\"\">\r\n                            - None -\r\n                          </option>\r\n                          {roles.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.RoleName}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          select\r\n                          fullWidth\r\n                          label=\"Select Reporting Manager\"\r\n                          name=\"reportingmanager\"\r\n                          value={values.reportingmanager}\r\n                          variant=\"outlined\"\r\n                          disabled={\r\n                            editableUser &&\r\n                            editableUser.Role.RoleName.toLowerCase() ===\r\n                              \"admin\" &&\r\n                            editableUser._id === loggedInUser._id\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.reportingmanager && errors.reportingmanager\r\n                          )}\r\n                          helperText={\r\n                            touched.reportingmanager && errors.reportingmanager\r\n                          }\r\n                        >\r\n                          <option value=\"\">- None -</option>\r\n                          {reportingmanagers.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.Name}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box display=\"flex\" justifyContent=\"center\" p={1}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      disabled={isSubmitting}\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                    >\r\n                      {isSubmitting\r\n                        ? \"Please wait...\"\r\n                        : UserId\r\n                        ? \"Update\"\r\n                        : \"Register\"}\r\n                    </Button>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      size=\"large\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      href={manageUserPath}\r\n                    >\r\n                      {UserId ? \"Cancel\" : \"Back\"}\r\n                    </Button>\r\n                  </Box>\r\n                </Card>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </DashboardPage>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\User\\ManageUser.tsx",["264","265","266","267","268"],"import { useContext, useState, useEffect } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Grid,\n  InputAdornment,\n  SvgIcon,\n  TextField,\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport {\n  GridColDef,\n  GridCellParams,\n  GridValueGetterParams,\n  GridValueFormatterParams,\n} from \"@material-ui/data-grid\";\nimport {\n  getRolesRequest,\n  getReportingManagersRequest,\n  getUsersRequest,\n  deleteUserRequest,\n} from \"../../../services/Admin\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport { IUser } from \"../../../classes/IUser\";\nimport { IUserDropdown, IUserShort } from \"../../../classes/IUserShort\";\nimport IRole from \"../../../classes/IRole\";\nimport ILoginUser from \"../../../classes/ILoginUser\";\nimport getInitials from \"../../../utils/getInitials\";\nimport moment from \"moment\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport GridView from \"../../DataGrid\";\nimport DialogBox from \"../../DialogBox\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  mbottom: {\n    marginBottom: theme.spacing(3),\n  },\n  avatar: {\n    cursor: \"pointer\",\n    width: 40,\n    height: 40,\n  },\n}));\n\nlet filters = {\n  RoleId: \"\",\n  ReportingManagerId: \"\",\n  SearchStr: \"\",\n};\n\nconst ManageUser = () => {\n  const classes = useStyles();\n  const loggedInUser = useContext(SessionContext).user as ILoginUser;\n\n  const initialDialogState = {\n    open: false,\n    title: \"Delete User\",\n    description: <>Are you sure you want to delete this user?</>,\n    UserId: \"\",\n  };\n\n  const [loading, setLoading] = useState(true);\n  const [rows, setRows] = useState([] as IUser[]);\n  const [originalData, setOriginalData] = useState([] as IUser[]);\n  const [roles, setRoles] = useState([] as IRole[]);\n  const [reportingmanagers, setReportingManagers] = useState(\n    [] as IUserDropdown[]\n  );\n  const [submmitting, setSubmmitting] = useState(false);\n  const [dialog, setDialog] = useState(initialDialogState);\n\n  const addUserPath = PROJECT_PATHS.Admin.find((x) => x.pagename === \"adduser\")\n    ?.path as string;\n  const editUserPath = PROJECT_PATHS.Admin.find(\n    (x) => x.pagename === \"edituser\"\n  )?.path as string;\n\n  const columns: GridColDef[] = [\n    {\n      field: \"Photo\",\n      headerName: \"Photo\",\n      headerAlign: \"center\",\n      cellClassName: \"text-center\",\n      width: 70,\n      sortable: false,\n      renderCell: (params: GridCellParams) => (\n        <Avatar className={classes.avatar} src={params.row.ProfilePhoto}>\n          {getInitials(params.row.FirstName + \" \" + params.row.LastName)}\n        </Avatar>\n      ),\n    },\n    {\n      field: \"Name\",\n      headerName: \"Name\",\n      width: 110,\n      valueGetter: (params: GridValueGetterParams) =>\n        `${params.row.FirstName} ${params.row.LastName}`,\n    },\n    {\n      field: \"Email\",\n      headerName: \"Email\",\n      flex: 1,\n    },\n    {\n      field: \"Phone\",\n      headerName: \"Phone\",\n      width: 110,\n    },\n    {\n      field: \"EmployeeCode\",\n      headerName: \"Emp. Code\",\n      width: 100,\n    },\n    {\n      field: \"Role\",\n      headerName: \"Role\",\n      width: 100,\n      valueGetter: (params: GridValueGetterParams) =>\n        `${params.row.Role ? params.row.Role.RoleName : \"\"}`,\n    },\n    {\n      field: \"ReportingManager\",\n      headerName: \"Reporting Manager\",\n      width: 120,\n      headerClassName: \"text-left\",\n      valueGetter: (params: GridValueGetterParams) =>\n        `${\n          params.row.ReportingManager\n            ? `${params.row.ReportingManager.FirstName} ${params.row.ReportingManager.LastName}`\n            : \"\"\n        }`,\n    },\n    {\n      field: \"ReminderTime\",\n      headerName: \"Reminder Time\",\n      width: 115,\n      headerClassName: \"text-left\",\n      valueFormatter: (params: GridValueFormatterParams) =>\n        convertTime24to12(`${params.row.ReminderTime}`),\n    },\n    {\n      field: \"CreatedDate\",\n      headerName: \"Registered Date\",\n      type: \"date\",\n      width: 125,\n      headerClassName: \"text-left\",\n      valueFormatter: (params: GridValueFormatterParams) =>\n        moment(`${params.row.CreatedDate}`).format(\"YYYY-MM-DD\"),\n    },\n    {\n      field: \" \",\n      headerName: \" \",\n      cellClassName: \"text-center\",\n      width: 120,\n      sortable: false,\n      renderCell: (params: GridCellParams) => (\n        <>\n          {(loggedInUser.IsHost ||\n            (loggedInUser.IsSuperAdmin && !params.row.IsSuperAdmin) ||\n            loggedInUser._id === params.row._id ||\n            loggedInUser._id === params.row.CreatedBy ||\n            (params.row.Role &&\n              params.row.Role.RoleName.toLowerCase() !== \"admin\")) && (\n            <IconButton\n              size=\"small\"\n              className=\"gridbutton btnEdit\"\n              aria-label=\"edit\"\n              disabled={submmitting}\n              href={editUserPath.replace(\":id\", `${params.row._id}`)}\n            >\n              <EditIcon />\n            </IconButton>\n          )}\n          {(loggedInUser.IsHost ||\n            (loggedInUser.IsSuperAdmin &&\n              loggedInUser._id !== params.row._id &&\n              !params.row.IsSuperAdmin) ||\n            loggedInUser._id === params.row.CreatedBy ||\n            (params.row.Role &&\n              params.row.Role.RoleName.toLowerCase() !== \"admin\")) && (\n            <IconButton\n              size=\"small\"\n              className=\"gridbutton btnDelete\"\n              aria-label=\"delete\"\n              disabled={submmitting}\n              onClick={() =>\n                showDialogBox(\n                  `${params.row._id}`,\n                  `${params.row.FirstName} ${params.row.LastName}`\n                )\n              }\n            >\n              <DeleteIcon />\n            </IconButton>\n          )}\n        </>\n      ),\n    },\n  ];\n\n  const convertTime24to12 = (time: string) => {\n    let convertedTime: string = time;\n    if (time) {\n      let [hours, minutes] = time.split(\":\").map(Number);\n\n      const AmOrPm = hours >= 12 ? \"PM\" : \"AM\";\n      hours = hours % 12 || 12;\n\n      convertedTime =\n        (hours < 10 ? \"0\" + hours : hours) +\n        \":\" +\n        (minutes < 10 ? \"0\" + minutes : minutes) +\n        \" \" +\n        AmOrPm;\n    }\n    return convertedTime;\n  };\n\n  const showDialogBox = (UserId: string, Name: string) => {\n    let popupdesc = (\n      <>\n        Are you sure you want to delete this user - <b>\"{Name}\"</b>?\n      </>\n    );\n    setDialog({\n      ...dialog,\n      open: true,\n      description: popupdesc,\n      UserId: UserId,\n    });\n  };\n\n  const closeDialogBox = () => {\n    setDialog({\n      ...dialog,\n      open: false,\n      UserId: \"\",\n    });\n  };\n\n  const getRoles = async () => {\n    try {\n      const response = await getRolesRequest();\n      if (response && response.Status.ResponseCode == 200) {\n        const drp_roles: IRole[] = response.Roles;\n        setRoles(drp_roles);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const getReportingManagers = async () => {\n    try {\n      const response = await getReportingManagersRequest();\n      if (response && response.Status.ResponseCode == 200) {\n        const drp_users: IUserDropdown[] = response.Users;\n        setReportingManagers(drp_users);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const getUsers = async () => {\n    try {\n      const response = await getUsersRequest();\n      if (response && response.Status.ResponseCode == 200) {\n        const gridrows: IUser[] = response.Users;\n        setRows(gridrows);\n        setOriginalData(gridrows);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const deleteUser = async () => {\n    try {\n      const UserId = dialog.UserId;\n      if (UserId) {\n        const response = await deleteUserRequest(UserId);\n        if (response && response.Status.ResponseCode == 200) {\n          await getReportingManagers();\n          await getUsers();\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n    setSubmmitting(false);\n    closeDialogBox();\n  };\n\n  const handleSearchChange = () => {\n    let gridrows = originalData;\n    if (filters.RoleId) {\n      gridrows = gridrows.filter((item) => item.Role._id === filters.RoleId);\n    }\n\n    if (filters.ReportingManagerId) {\n      gridrows = gridrows.filter(\n        (item) => item.ReportingManager._id === filters.ReportingManagerId\n      );\n    }\n\n    if (filters.SearchStr) {\n      gridrows = gridrows.filter(\n        (item) =>\n          item.FirstName.toLowerCase().indexOf(\n            filters.SearchStr.toLowerCase()\n          ) > -1 ||\n          item.LastName.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) >\n            -1 ||\n          item.Email.toLowerCase().indexOf(filters.SearchStr.toLowerCase()) >\n            -1 ||\n          item.Phone.toString().indexOf(filters.SearchStr.toLowerCase()) > -1 ||\n          item.EmployeeCode.toLowerCase().indexOf(\n            filters.SearchStr.toLowerCase()\n          ) > -1\n      );\n    }\n    setRows(gridrows);\n  };\n\n  useEffect(() => {\n    (async function execPreLoadFunctions() {\n      await getRoles();\n      await getReportingManagers();\n      await getUsers();\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <DashboardPage title=\"Manage Users\">\n      {!loading ? (\n        <>\n          <Box mt={2}>\n            <Grid container spacing={2}>\n              <Grid\n                item\n                md={3}\n                sm={6}\n                xs={12}\n                className={classes.mbottom}\n                style={{ textAlign: \"left\" }}\n              >\n                <Button\n                  color=\"primary\"\n                  size=\"large\"\n                  variant=\"contained\"\n                  startIcon={<AddIcon />}\n                  href={addUserPath}\n                >\n                  Register User\n                </Button>\n              </Grid>\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Role\"\n                  variant=\"outlined\"\n                  SelectProps={{ native: true }}\n                  InputLabelProps={{ shrink: true }}\n                  onChange={(e) => {\n                    filters.RoleId = e.target.value;\n                    handleSearchChange();\n                  }}\n                >\n                  <option key=\"-1\" value=\"\">\n                    - None -\n                  </option>\n                  {roles.map((option) => (\n                    <option key={option._id} value={option._id}>\n                      {option.RoleName}\n                    </option>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Reporting Manager\"\n                  variant=\"outlined\"\n                  SelectProps={{ native: true }}\n                  InputLabelProps={{ shrink: true }}\n                  onChange={(e) => {\n                    filters.ReportingManagerId = e.target.value;\n                    handleSearchChange();\n                  }}\n                >\n                  <option key=\"-1\" value=\"\">\n                    - None -\n                  </option>\n                  {reportingmanagers.map((option) => (\n                    <option key={option._id} value={option._id}>\n                      {option.Name}\n                    </option>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  placeholder=\"Search...\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SvgIcon fontSize=\"small\" color=\"disabled\">\n                          <SearchIcon />\n                        </SvgIcon>\n                      </InputAdornment>\n                    ),\n                  }}\n                  onChange={(e) => {\n                    filters.SearchStr = e.target.value;\n                    handleSearchChange();\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n          <Card>\n            <PerfectScrollbar>\n              <Box minWidth={1170}>\n                <GridView columns={columns} rows={rows} />\n              </Box>\n            </PerfectScrollbar>\n            <DialogBox\n              open={dialog.open}\n              title={dialog.title}\n              description={dialog.description}\n              isSubmitting={submmitting}\n              onDialogAction={(isAgree: boolean) => {\n                if (isAgree) {\n                  setSubmmitting(true);\n                  deleteUser();\n                } else {\n                  closeDialogBox();\n                }\n              }}\n            />\n          </Card>\n        </>\n      ) : (\n        <Spinner />\n      )}\n    </DashboardPage>\n  );\n};\n\nexport default ManageUser;\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Role\\AddRole.tsx",["269","270","271","272","273","274"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n    getRoleByIdRequest,\n    insertRoleRequest,\n    updateRoleRequest\n} from \"../../../services/Admin\";\nimport IRole from \"../../../classes/IRole\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mainBox: {\n        maxWidth: 800,\n        margin: '16px auto 0'\n    },\n    button: {\n        margin: theme.spacing(1),\n    }\n}));\n\nexport interface IFormValues {\n    rolename: string;\n}\n\nconst AddRole = (props: any) => {\n    const classes = useStyles();\n    const context = useContext(SessionContext);\n    const RoleId = props.match.params.id;\n    const manageRole = PROJECT_PATHS.Admin.find(x => x.pagename === 'viewroles')?.path as string;\n\n    const [loading, setLoading] = useState(true);\n    const [initialValues, setInitialValues] = useState({\n        rolename: ''\n    } as IFormValues);\n\n\n    const getRoleById = async (RoleId: string) => {\n        try {\n            const response = await getRoleByIdRequest(RoleId);\n            if (response && response.Status.ResponseCode == 200) {\n                const Role: IRole = response.Role;\n                setInitialValues({ rolename: Role.RoleName });\n                setLoading(false);\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    useEffect(() => {\n        (async function execPreLoadFunctions() {\n            if (RoleId) {\n                await getRoleById(RoleId);\n            }\n            else {\n                setLoading(false);\n            }\n        }());\n    }, []);\n\n    const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n        try {\n            const loggedinUserId = context.user?._id as string;\n            if (RoleId) {\n                const response = await updateRoleRequest(RoleId, values.rolename, loggedinUserId);\n                if (response && response.Status.ResponseCode == 200) {\n                    props.history.push(manageRole)\n                }\n                else if (response.Status.ResponseCode == 206) {\n                    snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n            else {\n                const response = await insertRoleRequest(values.rolename, loggedinUserId);\n                if (response && response.Status.ResponseCode == 200) {\n                    snackbarAlert.success(\"Role added successfully!\");\n                    resetForm();\n                }\n                else if (response.Status.ResponseCode == 206) {\n                    snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    };\n\n    const validationSchema = Yup.object().shape({\n        rolename: Yup.string()\n            .min(2, 'Role name should be minimum 2 characters!')\n            .max(100, 'Role name should be maximum 100 characters!')\n            .required('Role name is required!')\n    });\n\n\n    return (\n        <DashboardPage title={RoleId ? \"Manage Roles | Edit Role\" : \"Manage Roles | Add Role\"}>\n            {(!loading) ?\n                <Box className={classes.mainBox}>\n                    <Formik\n                        enableReinitialize={true}\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={handleSubmit}\n                    >\n                        {({\n                            errors,\n                            handleBlur,\n                            handleChange,\n                            handleSubmit,\n                            isSubmitting,\n                            touched,\n                            values\n                        }) => (\n                            <form onSubmit={handleSubmit}>\n                                <Card>\n                                    <CardHeader\n                                        subheader={RoleId ? \"Please change the below details to update role.\" : \"Please fill the below details to add new role.\"}\n                                        title={RoleId ? \"Edit Role\" : \"Add Role\"}\n                                        style={{ textAlign: \"center\" }}\n                                        titleTypographyProps={{ variant: 'h3', component: 'h3' }}\n                                    />\n                                    <Divider />\n                                    <Box p={3}>\n                                        <Grid container spacing={2}>\n                                            <Grid item md={12} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    label=\"Role Name\"\n                                                    name=\"rolename\"\n                                                    value={values.rolename}\n                                                    variant=\"outlined\"\n                                                    inputProps={{ maxLength: 100 }}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={Boolean(touched.rolename && errors.rolename)}\n                                                    helperText={touched.rolename && errors.rolename}\n\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                    <Divider />\n                                    <Box\n                                        display=\"flex\"\n                                        justifyContent=\"center\"\n                                        p={1}\n                                    >\n                                        <Button\n                                            color=\"primary\"\n                                            disabled={isSubmitting}\n                                            size=\"large\"\n                                            type=\"submit\"\n                                            variant=\"contained\"\n                                            className={classes.button}\n                                        >\n                                            {(isSubmitting) ? \"Please wait...\" : (RoleId ? \"Update\" : \"Save\")}\n                                        </Button>\n                                        <Button\n                                            color=\"secondary\"\n                                            size=\"large\"\n                                            variant=\"contained\"\n                                            className={classes.button}\n                                            href={manageRole}\n                                        >\n                                            {RoleId ? 'Cancel' : 'Back'}\n                                        </Button>\n                                    </Box>\n                                </Card>\n                            </form>\n                        )}\n                    </Formik>\n                </Box>\n                :\n                <Spinner />\n            }\n        </DashboardPage>\n    );\n};\n\nexport default AddRole;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Role\\ManageRole.tsx",["275","276"],"import { useState, useEffect } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport {\n    Box,\n    Button,\n    Card,\n    Grid,\n    InputAdornment,\n    SvgIcon,\n    TextField\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { GridColDef, GridCellParams } from \"@material-ui/data-grid\";\nimport { getRolesRequest, deleteRoleRequest } from \"../../../services/Admin\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport IRole from \"../../../classes/IRole\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport GridView from \"../../DataGrid\";\nimport DialogBox from \"../../DialogBox\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mbottom: {\n        marginBottom: theme.spacing(3),\n    }\n}));\n\nconst ManageRole = () => {\n    const classes = useStyles();\n\n    const initialDialogState = {\n        open: false,\n        title: 'Delete Role',\n        description: <>Are you sure you want to delete this role?</>,\n        RoleId: ''\n    };\n\n    const [loading, setloading] = useState(true);\n    const [rows, setrows] = useState([] as IRole[]);\n    const [originalData, setOriginalData] = useState([] as IRole[]);\n    const [submmitting, setsubmmitting] = useState(false);\n    const [dialog, setdialog] = useState(initialDialogState);\n\n    const addRolePath = PROJECT_PATHS.Admin.find(x => x.pagename === 'addrole')?.path as string;\n    const editRolePath = PROJECT_PATHS.Admin.find(x => x.pagename === 'editrole')?.path as string;\n\n    const columns: GridColDef[] = [\n        {\n            field: 'RoleName',\n            headerName: 'Role Name',\n            flex: 1\n        },\n        {\n            field: ' ',\n            headerName: ' ',\n            cellClassName: 'text-center',\n            width: 200,\n            sortable: false,\n            renderCell: (params: GridCellParams) => (\n                <>\n                    {params.row.IsPublic &&\n                        <>\n                            <IconButton\n                                size=\"small\"\n                                className=\"gridbutton btnEdit\"\n                                aria-label=\"edit\"\n                                disabled={submmitting}\n                                href={editRolePath.replace(':id', `${params.row._id}`)}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                            <IconButton\n                                size=\"small\"\n                                className=\"gridbutton btnDelete\"\n                                aria-label=\"delete\"\n                                disabled={submmitting}\n                                onClick={() => showDialogBox(`${params.row._id}`, `${params.row.RoleName}`)}\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </>\n                    }\n                </>\n            )\n        }\n    ];\n\n    const showDialogBox = (RoleId: string, RoleName: string) => {\n        let popupdesc = <>Are you sure you want to delete this role - <b>\"{RoleName}\"</b>?</>;\n        setdialog({\n            ...dialog,\n            open: true,\n            description: popupdesc,\n            RoleId: RoleId\n        })\n    };\n\n    const closeDialogBox = () => {\n        setdialog({\n            ...dialog,\n            open: false,\n            RoleId: ''\n        })\n    };\n\n    const getRoles = async () => {\n        try {\n            const response = await getRolesRequest();\n            if (response && response.Status.ResponseCode == 200) {\n                const gridrows: IRole[] = response.Roles;\n                setrows(gridrows);\n                setOriginalData(gridrows);\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    const deleteRole = async () => {\n        try {\n            const RoleId = dialog.RoleId;\n            if (RoleId) {\n                const response = await deleteRoleRequest(RoleId);\n                if (response && response.Status.ResponseCode == 200) {\n                    await getRoles();\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke!\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n        setsubmmitting(false);\n        closeDialogBox();\n    }\n\n    const handleSearchChange = (e: any) => {\n        if (e.target.value) {\n            let gridrows = originalData;\n            gridrows = gridrows.filter(item => item.RoleName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1);\n            setrows(gridrows);\n        } else {\n            setrows(originalData);\n        }\n    };\n\n    useEffect(() => {\n        (async function execPreLoadFunctions() {\n            await getRoles();\n            setloading(false);\n        }());\n    }, []); // <-- Have to pass [] here, to make single call of api. It will work as componentDidMount. If it will not be passed, function will be called in every render and it will work as componentDidUpdate.\n\n    return (\n        <DashboardPage title=\"Manage Roles\">\n            {(!loading) ?\n                <>\n                    <Box mt={2}>\n                        <Grid container>\n                            <Grid item md={9} sm={6} xs={12} className={classes.mbottom} style={{ textAlign: 'left' }}>\n                                <Button\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    variant=\"contained\"\n                                    startIcon={<AddIcon />}\n                                    href={addRolePath}\n                                >\n                                    Add Role\n                                </Button>\n                            </Grid>\n                            <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\n                                <TextField\n                                    fullWidth\n                                    size=\"small\"\n                                    placeholder=\"Search...\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <SvgIcon\n                                                    fontSize=\"small\"\n                                                    color=\"disabled\"\n                                                >\n                                                    <SearchIcon />\n                                                </SvgIcon>\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                    onChange={handleSearchChange}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Card>\n                        <PerfectScrollbar>\n                            <Box minWidth={800}>\n                                <GridView columns={columns} rows={rows} />\n                            </Box>\n                        </PerfectScrollbar>\n                        <DialogBox\n                            open={dialog.open}\n                            title={dialog.title}\n                            description={dialog.description}\n                            isSubmitting={submmitting}\n                            onDialogAction={(isAgree: boolean) => {\n                                if (isAgree) {\n                                    setsubmmitting(true);\n                                    deleteRole();\n                                } else {\n                                    closeDialogBox();\n                                }\n                            }}\n                        />\n                    </Card>\n                </>\n                :\n                <Spinner />\n            }\n        </DashboardPage>\n    );\n};\n\nexport default ManageRole;\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\DashboardPage.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\Admin.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\index.tsx",["277"],"import { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport IProfile from \"../../../classes/IProfile\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport { getProfileRequest } from \"../../../services/MyAccount\";\nimport LeftProfile from \"./LeftProfile\";\nimport RightProfile from \"./RightProfile\";\nimport snackbarAlert from \"../../SnackbarAlert/\";\nimport Spinner from \"../../Spinner/\";\n\nexport interface IMyProfileStates {\n    UserId: string;\n    Profile?: IProfile;\n    loading: boolean;\n}\n\nconst initialState = {\n    UserId: '',\n    loading: true\n}\n\nclass MyProfile extends Component<{}, IMyProfileStates> {\n    static contextType = SessionContext;\n\n    constructor(props: any) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        this.getMyProfile(this.context.user._id);\n    }\n\n    async getMyProfile(UserId: string) {\n        try {\n            if (UserId) {\n                const response = await getProfileRequest(UserId);\n                if (response) {\n                    if (response.Status.ResponseCode == 200) {\n                        this.setState({\n                            UserId: this.context.user._id,\n                            Profile: response.User,\n                            loading:false\n                        });\n                    }\n                    else {\n                        snackbarAlert.error(\"Oops! Something Broke!\");\n                    }\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke!\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    renderContent() {\n        if (!this.state.loading) {\n            return (\n                <Grid\n                    container\n                    spacing={3}\n                >\n                    <Grid\n                        item\n                        lg={4}\n                        md={4}\n                        xs={12}\n                    >\n                        {this.state.Profile &&\n                            <LeftProfile UserId={this.state.UserId} Profile={this.state.Profile} />\n                        }\n                    </Grid>\n                    <Grid\n                        item\n                        lg={8}\n                        md={8}\n                        xs={12}\n                    >\n                        {this.state.Profile &&\n                            <RightProfile Profile={this.state.Profile} />\n                        }\n                    </Grid>\n                </Grid>\n            );\n        }\n\n        return (\n            <Spinner />\n        );\n    }\n\n    render() {\n        return <> {this.renderContent()}</>;\n    }\n};\n\nexport default MyProfile;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Spinner\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\axiosConfig.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DialogBox\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\RightProfile.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\LeftProfile.tsx",["278","279"],"import { useState, useContext } from \"react\";\nimport {\n    Avatar,\n    Box,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    Divider,\n    makeStyles,\n    Theme,\n    Typography\n} from \"@material-ui/core\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport IProfile from \"../../../classes/IProfile\";\nimport { updateProfilePictureRequest } from \"../../../services/MyAccount\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport snackbarAlert from \"../../SnackbarAlert/\";\n\ninterface ILeftProfileProps {\n    UserId: string;\n    Profile: IProfile;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    avatar: {\n        height: 200,\n        width: 200,\n        [theme.breakpoints.down('xs')]: {\n            height: 100,\n            width: 100,\n        },\n    },\n    loadingspan: {\n        width: 200,\n        height: 200,\n        position: 'relative',\n        marginTop: -200,\n        opacity: 0.7,\n        backgroundColor: '#fff',\n        borderRadius: '50%'\n    },\n    loadingimg: {\n        width: 100,\n        marginTop: 50,\n    }\n}));\n\nconst LeftProfile = ({ UserId, Profile, ...rest }: ILeftProfileProps) => {\n    const classes = useStyles();\n    const [state, setState] = useState({ isUploading: false });\n    const context = useContext(SessionContext);\n\n    const handleChange = async (e: any) => {\n        try {\n            setState({ isUploading: true });\n            let file_list = e.target.files;\n\n            if (file_list && file_list[0]) {\n                const selectedFile = file_list[0];\n                const maxFileSize: number = 4194304; // 4MB -> 4 * 1024 * 1024 – to check in KB – Kilo Bytes\n\n                if (selectedFile.size > maxFileSize) {\n                    setState({ isUploading: false });\n                    snackbarAlert.error(\"Failed!! Max allowed image size is 4 MB\");\n                }\n                else {\n                    const allowedExt = ['png', 'jpg', 'jpeg'];\n                    const ext = selectedFile.name.split('.').pop().toLowerCase();\n                    if (!allowedExt.includes(ext)) {\n                        setState({ isUploading: false });\n                        snackbarAlert.error(\"Failed!! Allowed image with these extentions only : \" + allowedExt.join(', ') + \".\");\n                    }\n                    else {\n                        if (UserId) {\n                            const response = await updateProfilePictureRequest(UserId, selectedFile);\n                            if (response) {\n                                if (response.Status.ResponseCode == 200) {\n                                    Profile.ProfilePhoto = response.ProfilePhoto;\n                                    context.UpdateProfilePicture(response.ProfilePhoto);\n                                    snackbarAlert.success(\"Profile picture updated successfully!\");\n                                }\n                                else {\n                                    snackbarAlert.error(\"Oops! Something Broke!\");\n                                }\n                            }\n                            else {\n                                snackbarAlert.error(\"Oops! Something Broke!\");\n                            }\n                        }\n                        else {\n                            snackbarAlert.error(\"Oops! Something Broke!\");\n                        }\n                    }\n                }\n            }\n            else {\n                snackbarAlert.error(\"Please select the image to update.\");\n            }\n            setState({ isUploading: false });\n        }\n        catch (error) {\n            setState({ isUploading: false });\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    return (\n        <Card\n            {...rest}\n        >\n            <CardContent>\n                <Box\n                    alignItems=\"center\"\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                >\n                    <Avatar\n                        className={classes.avatar}\n                        src={Profile.ProfilePhoto}\n                    />\n                    {(state.isUploading) &&\n                        <span className={classes.loadingspan}>\n                            <img src=\"/static/images/loader.gif\" className={classes.loadingimg} />\n                        </span>\n                    }\n                    <Typography\n                        color=\"textPrimary\"\n                        gutterBottom\n                        variant=\"h3\"\n                    >\n                        {Profile.Name}\n                    </Typography>\n                    <Typography\n                        color=\"textSecondary\"\n                        variant=\"body1\"\n                    >\n                        {Profile.EmployeeCode}\n                    </Typography>\n                </Box>\n            </CardContent>\n            <Divider />\n            <Box display=\"flex\" justifyContent=\"center\">\n                <CardActions>\n                    <label htmlFor=\"ProfilePhoto\">\n                        <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            style={{ display: 'none' }}\n                            id=\"ProfilePhoto\"\n                            disabled={state.isUploading}\n                            onChange={handleChange}\n                        />\n                        <Button\n                            color=\"primary\"\n                            fullWidth\n                            variant=\"text\"\n                            component=\"span\"\n                            disabled={state.isUploading}\n                            startIcon={<CloudUploadIcon />}\n                        >\n                            Update Profile Picture\n                        </Button>\n                    </label>\n                </CardActions>\n            </Box>\n        </Card>\n    );\n};\n\nexport default LeftProfile;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\MyAccount.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\serviceConfig.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\EditProfile.tsx",["280","281"],"import * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport IProfile from \"../../../classes/IProfile\";\nimport { updateProfileRequest } from \"../../../services/MyAccount\";\nimport { NumbersRegExp } from \"../../../shared/constants\";\nimport snackbarAlert from \"../../SnackbarAlert/\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    button: {\n        margin: theme.spacing(1),\n    }\n}));\n\ninterface IEditProfileProps {\n    Profile: IProfile;\n    ChageRightProfileMode: (newEditMode: boolean) => void;\n}\n\nexport interface IFormValues {\n    name: string;\n    phone: number;\n    email: string;\n    employeeCode: string;\n    designation: string;\n    role: string;\n    reportingManager: string;\n    reminderTime: string;\n}\n\nconst EditProfile = ({ Profile, ChageRightProfileMode }: IEditProfileProps) => {\n    const classes = useStyles();\n\n    const handleSubmit = async (values: IFormValues) => {\n        try {\n            if (Profile) {\n                const response = await updateProfileRequest(Profile._id, values.phone, values.reminderTime);\n                if (response) {\n                    if (response.Status.ResponseCode == 200) {\n                        Profile.Phone = values.phone;\n                        Profile.ReminderTime = values.reminderTime;\n                        snackbarAlert.success(\"Profile updated successfully!\");\n                        ChageRightProfileMode(false);\n                    }\n                    else if (response.Status.ResponseCode == 205) {\n                        snackbarAlert.warning(\"Phone number already exists! Please enter correct one.\");\n                    }\n                    else {\n                        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                    }\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    };\n\n    const validationSchema = Yup.object().shape({\n        phone: Yup.string()\n            .min(10, 'Phone number should be 10 digits!')\n            .max(10, 'Phone number should be 10 digits!')\n            .matches(NumbersRegExp, 'Must be a valid phone number!')\n            .required('Phone number is required!'),\n        reminderTime: Yup.string().required('Reminder time is required!')\n    });\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={{\n                name: Profile.Name,\n                phone: Profile.Phone,\n                email: Profile.Email,\n                employeeCode: Profile.EmployeeCode,\n                designation: Profile.Designation,\n                role: Profile.Role,\n                reportingManager: Profile.ReportingManager,\n                reminderTime: Profile.ReminderTime\n            }}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n        >\n            {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <Card>\n                        <CardHeader\n                            subheader=\"Please change the below details to update profile.\"\n                            title=\"Edit Profile\"\n                            style={{ textAlign: \"center\" }}\n                            titleTypographyProps={{ variant: 'h3', component: 'h3' }}\n                        />\n                        <Divider />\n                        <CardContent>\n                            <Grid container spacing={2}>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        value={Profile.Name}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Email Address\"\n                                        name=\"email\"\n                                        value={Profile.Email}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Employee Code\"\n                                        name=\"employeeCode\"\n                                        value={Profile.EmployeeCode}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Designation\"\n                                        name=\"designation\"\n                                        value={Profile.Designation}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Role\"\n                                        name=\"role\"\n                                        value={Profile.Role}\n                                        variant=\"outlined\"\n                                    >\n                                    </TextField>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        disabled\n                                        fullWidth\n                                        label=\"Reporting Manager\"\n                                        name=\"reportingManager\"\n                                        value={Profile.ReportingManager}\n                                        variant=\"outlined\"\n                                    >\n                                    </TextField>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Phone Number\"\n                                        name=\"phone\"\n                                        value={values.phone}\n                                        variant=\"outlined\"\n                                        inputProps={{ maxLength: 10 }}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={Boolean(touched.phone && errors.phone)}\n                                        helperText={touched.phone && errors.phone}\n\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Reminder Time\"\n                                        name=\"reminderTime\"\n                                        type=\"time\"\n                                        value={values.reminderTime}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        inputProps={{\n                                            step: 300, // 5 min\n                                        }}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={Boolean(touched.reminderTime && errors.reminderTime)}\n                                        helperText={touched.reminderTime && errors.reminderTime}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                        <Divider />\n                        <Box\n                            display=\"flex\"\n                            justifyContent=\"flex-end\"\n                            p={2}\n                        >\n                            <Button\n                                color=\"primary\"\n                                disabled={isSubmitting}\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                className={classes.button}\n                            >\n                                {(isSubmitting) ? \"Please wait...\" : \"Update\"}\n                            </Button>\n                            <Button\n                                color=\"secondary\"\n                                size=\"large\"\n                                variant=\"contained\"\n                                className={classes.button}\n                                onClick={() => ChageRightProfileMode(false)}\n                            >\n                                Cancel\n                            </Button>\n                        </Box>\n                    </Card>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nexport default EditProfile;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\MyProfile\\ViewProfile.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\utils\\getInitials.js",["282"],"export default (name = '') => name\n  .replace(/\\s+/, ' ')\n  .split(' ')\n  .slice(0, 2)\n  .map((v) => v && v[0].toUpperCase())\n  .join('');\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\AccountPage.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\MyAccount\\ChangePassword.tsx",["283","284","285"],"import { useContext } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Container,\n    Divider,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { changePasswordRequest } from \"../../services/MyAccount\";\nimport snackbarAlert from \"../SnackbarAlert/\";\nimport SessionContext from \"../../context/SessionContext\";\n\nexport interface IFormValues {\n    oldpassword: string;\n    newpassword: string;\n    confirmpassword: string;\n}\n\nconst ChangePassword = () => {\n    const context = useContext(SessionContext);\n\n    const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n        try {\n            if (context.user) {\n                const response = await changePasswordRequest(context.user._id, values.oldpassword, values.newpassword);\n                if (response) {\n                    if (response.Status.ResponseCode == 200) {\n                        snackbarAlert.success(\"Password updated successfully! Please sign in with new password, when you come back.\");\n                        resetForm();\n                    }\n                    else if (response.Status.ResponseCode == 207) {\n                        snackbarAlert.warning(\"Old password is wrong! Please enter correct one.\");\n                    }\n                    else {\n                        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                    }\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    };\n\n    const validationSchema = Yup.object().shape({\n        oldpassword: Yup.string().max(100).required('Old password is required!'),\n        newpassword: Yup.string()\n            .min(7, 'Password length should be minimum 7 characters!')\n            .max(100, 'Password should be maximum 100 characters!')\n            .required('New Password is required!')\n            .test('passwords-match', 'New password must be different from old password!', function (value) {\n                return this.parent.oldpassword !== value\n            }),\n        confirmpassword: Yup.string().required(\"Confirm passsword is required!\")\n            .oneOf([Yup.ref('newpassword')], 'Passwords must match!')\n    });\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" justifyContent=\"center\">\n            <Formik\n                enableReinitialize\n                initialValues={{\n                    oldpassword: '',\n                    newpassword: '',\n                    confirmpassword: ''\n                }}\n                validationSchema={validationSchema}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    errors,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    isSubmitting,\n                    touched,\n                    values\n                }) => (\n                    <form onSubmit={handleSubmit}>\n                        <Grid item lg={12} md={12} xs={12}>\n                            <Card>\n                                <CardHeader\n                                    subheader=\"Please fill below details to change your password\"\n                                    title=\"Change Password\"\n                                    style={{ textAlign: \"center\" }}\n                                    titleTypographyProps={{ variant: 'h3', component: 'h3' }}\n                                />\n                                <Divider />\n                                <CardContent>\n                                    <Grid container spacing={2}>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Old Password\"\n                                                margin=\"normal\"\n                                                name=\"oldpassword\"\n                                                type=\"password\"\n                                                value={values.oldpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.oldpassword && errors.oldpassword)}\n                                                helperText={touched.oldpassword && errors.oldpassword}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"New Password\"\n                                                margin=\"normal\"\n                                                name=\"newpassword\"\n                                                type=\"password\"\n                                                value={values.newpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.newpassword && errors.newpassword)}\n                                                helperText={touched.newpassword && errors.newpassword}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Confirm Password\"\n                                                margin=\"normal\"\n                                                name=\"confirmpassword\"\n                                                type=\"password\"\n                                                value={values.confirmpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.confirmpassword && errors.confirmpassword)}\n                                                helperText={touched.confirmpassword && errors.confirmpassword}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                                <Divider />\n                                <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n                                    <Button\n                                        color=\"primary\"\n                                        disabled={isSubmitting}\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                    >\n                                        {(isSubmitting) ? \"Please wait...\" : \"Change Password\"}\n                                    </Button>\n                                </Box>\n                            </Card>\n                        </Grid>\n                    </form>\n                )}\n            </Formik>\n        </Box>\n    );\n};\n\nexport default ChangePassword;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DialogBox\\ViewDialogBox.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Admin\\Candidate\\ViewCandidate.tsx",["286","287"],"import { Box, Card, Grid, Typography } from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { ICandidate } from \"../../../classes/IUser\";\r\n\r\nexport interface IProps {\r\n  candidate: ICandidate;\r\n}\r\n\r\nconst ViewCandidate = (props: any) => {\r\n  return (\r\n    <Card>\r\n      <Box p={2}>\r\n        <Grid container spacing={2}>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Name : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Name}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Email : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Email}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Contact : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Contact}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">DOB : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.DOB}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Skills : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Skills}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Designation : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Designation}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Profile : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Profile}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Experience : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Experience}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Reason For Leaving : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Reason_For_Leaving}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Source : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Source}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Interview Schedule : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Interview_Schedule}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Date Of Joining : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Date_Of_Joining}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Hiring Status : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Hiring_Status}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Comment : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Comment}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Notice Period : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Notice_Period}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Ready To Relocate : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Ready_To_Relocate}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Communication : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Communication}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Current CTC : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Current_CTC}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Current Location : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Current_Location}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Expected CTC : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Expected_CTC}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">College Name : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.College_Name}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={6} sm={6} xs={12}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <Typography variant=\"h5\">Resume : </Typography>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography>{props.candidate.Resume}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ViewCandidate;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Page\\MainPage.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\Login.tsx",["288","289","290","291"],"import { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport ILoginUser from \"../../classes/ILoginUser\";\nimport { loginRequest } from \"../../services/Auth\";\nimport SessionContext from \"../../context/SessionContext\";\nimport snackbarAlert from \"../SnackbarAlert/\";\n\nexport interface IFormValues {\n  email: string;\n  password: string;\n}\n\nclass Login extends Component {\n  static contextType = SessionContext;\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  handleSubmit = async (values: IFormValues) => {\n    try {\n      const response = await loginRequest(values.email, values.password);\n      if (response) {\n        if (response.Status.ResponseCode == 200) {\n          const User: ILoginUser = response.User;\n          this.context.LoginUser(User);\n        } else if (response.Status.ResponseCode == 202) {\n          snackbarAlert.warning(\"You have entered wrong credentials!\");\n        } else if (response.Status.ResponseCode == 203) {\n          snackbarAlert.warning(\"Email is not registered yet!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Must be a valid email!\")\n      .max(100)\n      .required(\"Email is required!\"),\n    password: Yup.string().max(100).required(\"Password is required!\"),\n  });\n\n  render() {\n    const forgotPassword = PROJECT_PATHS.Auth.find(\n      (x) => x.pagename === \"forgotpassword\"\n    );\n    return (\n      <MainPage title=\"Sign In\">\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          height=\"100%\"\n          justifyContent=\"center\"\n          padding={2}\n        >\n          <Container className=\"maincontent-box\">\n            <Box mb={3}>\n              <Typography color=\"textPrimary\" className=\"boxtitle\" variant=\"h2\">\n                Sign in\n              </Typography>\n              <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n                Sign in to HRM platform\n              </Typography>\n            </Box>\n            <Formik\n              initialValues={{\n                email: \"\",\n                password: \"\",\n              }}\n              validationSchema={this.validationSchema}\n              onSubmit={this.handleSubmit}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    margin=\"normal\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    // required // This enables the browser messages\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Password\"\n                    margin=\"normal\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.password && errors.password)}\n                    helperText={touched.password && errors.password}\n                  />\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      {isSubmitting ? \"Signing in...\" : \"Sign in now\"}\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\">\n                    <Link\n                      component={RouterLink}\n                      to={forgotPassword ? forgotPassword.path : \"#\"}\n                      variant=\"h6\"\n                    >\n                      FORGOT PASSWORD ?\n                    </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </Box>\n      </MainPage>\n    );\n  }\n}\n\nexport default Login;\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\ForgotPassword.tsx",["292","293","294"],"import { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport { sendResetPasswordLinkRequest } from \"../../services/Auth\";\nimport snackbarAlert from \"../SnackbarAlert/\";\n\nexport interface IFormValues {\n  email: string;\n}\n\nclass ForgotPassword extends Component {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n    try {\n      const resetPasswordPath = PROJECT_PATHS.Auth.find(x => x.pagename === 'resetpassword')?.path.replace('/:id', '');\n      const resetPasswordUrl = window.location.protocol + '//' + window.location.hostname + resetPasswordPath;\n\n      const response = await sendResetPasswordLinkRequest(values.email, resetPasswordUrl);\n      if (response) {\n        if (response.Status.ResponseCode == 200) {\n          snackbarAlert.success(\"Please check your email to reset password!\");\n          resetForm();\n        }\n        else if (response.Status.ResponseCode == 203) {\n          snackbarAlert.warning(\"Email is not registered yet!\");\n        }\n        else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      }\n      else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    }\n    catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email!').max(100).required('Email is required!')\n  });\n\n  render() {\n    const login = PROJECT_PATHS.Auth.find(x => x.pagename === 'landing');\n    return (\n      <MainPage title=\"Forgot Password\">\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" justifyContent=\"center\" padding={2}>\n          <Container className=\"maincontent-box\">\n            <Box mb={3}>\n              <Typography color=\"textPrimary\" className=\"boxtitle\" variant=\"h2\">Forgot Your Password?</Typography>\n              <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">If you forgot your password, no worries: enter your email address and we'll send you a link to pick a new password.</Typography>\n            </Box>\n            <Formik\n              initialValues={{\n                email: ''\n              }}\n              validationSchema={this.validationSchema}\n              onSubmit={this.handleSubmit}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    margin=\"normal\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      {(isSubmitting) ? \"Please wait...\" : \"Send link\"}\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\" >\n                    <Link component={RouterLink} to={login ? login.path : '#'} variant=\"h6\">\n                      BACK TO SIGN IN\n                  </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </Box>\n      </MainPage>\n    );\n  }\n};\n\nexport default ForgotPassword;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\Auth\\ResetPassword.tsx",["295","296","297"],"import { Component } from \"react\";\nimport { Link as RouterLink, RouteComponentProps } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport { resetPasswordRequest } from \"../../services/Auth\";\nimport snackbarAlert from \"../SnackbarAlert/\";\n\nexport interface IFormValues {\n  password: string;\n  confirmpassword: string;\n}\n\nexport interface IParams {\n  id: string;\n}\n\nexport interface IState {\n  loginPath: string;\n}\n\nclass ResetPassword extends Component<RouteComponentProps, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      loginPath: PROJECT_PATHS.Auth.find(x => x.pagename === 'landing')?.path as string\n    }\n  }\n\n  handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n    try {\n      const params = this.props.match.params as IParams;\n\n      const response = await resetPasswordRequest(params.id, values.password);\n      if (response) {\n        if (response.Status.ResponseCode == 200) {\n          snackbarAlert.success(\"Password updated successfully! Please sign in with new password.\");\n          resetForm();\n          const loginPath = PROJECT_PATHS.Auth.find(x => x.pagename === 'landing')?.path as string;\n          this.props.history.push(this.state.loginPath);\n        }\n        else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      }\n      else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    }\n    catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    password: Yup.string()\n      .min(7, 'Password should be minimum 7 characters!')\n      .max(100, 'Password should be maximum 100 characters!')\n      .required('Password is required!'),\n    confirmpassword: Yup.string()\n      .required(\"Confirm passsword is required!\")\n      .test('passwords-match', 'Passwords must match!', function (value) {\n        return this.parent.password === value\n      })\n  });\n\n  render() {\n    const login = PROJECT_PATHS.Auth.find(x => x.pagename === 'landing');\n    return (\n      <MainPage title=\"Reset Password\">\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" justifyContent=\"center\" padding={2}>\n          <Container className=\"maincontent-box\">\n            <Box mb={3}>\n              <Typography color=\"textPrimary\" className=\"boxtitle\" variant=\"h2\">Reset Your Password</Typography>\n              <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">Please enter a new password to reset.</Typography>\n            </Box>\n            <Formik\n              initialValues={{\n                password: '',\n                confirmpassword: ''\n              }}\n              validationSchema={this.validationSchema}\n              onSubmit={this.handleSubmit}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    fullWidth\n                    label=\"New Password\"\n                    margin=\"normal\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.password && errors.password)}\n                    helperText={touched.password && errors.password}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Confirm Password\"\n                    margin=\"normal\"\n                    name=\"confirmpassword\"\n                    type=\"password\"\n                    inputProps={{ maxLength: 100 }}\n                    value={values.confirmpassword}\n                    variant=\"outlined\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.confirmpassword && errors.confirmpassword)}\n                    helperText={touched.confirmpassword && errors.confirmpassword}\n                  />\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      {(isSubmitting) ? \"Please wait...\" : \"Reset Password\"}\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\" >\n                    <Link component={RouterLink} to={this.state.loginPath} variant=\"h6\">\n                      GO TO SIGN IN\n                  </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </Box>\n      </MainPage>\n    );\n  }\n};\n\nexport default ResetPassword;","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\index.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\components\\DataGrid\\index.tsx",["298"],"import { useEffect } from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport {\r\n  DataGrid,\r\n  GridOverlay,\r\n  GridBaseComponentProps,\r\n  GridColDef,\r\n} from \"@material-ui/data-grid\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    \"& .MuiDataGrid-window\": {\r\n      position: \"relative !important\",\r\n      top: \"0 !important\",\r\n    },\r\n    \"& .MuiDataGrid-viewport, .rendering-zone, .MuiDataGrid-row\": {\r\n      maxHeight: \"none !important\",\r\n    },\r\n    \"& .MuiDataGrid-main > div:nth-child(2):not(.MuiDataGrid-overlay) > div\": {\r\n      height: \"auto !important\",\r\n    },\r\n    \"& .MuiDataGrid-columnsContainer\": {\r\n      backgroundColor: theme.palette.type === \"light\" ? \"#fafafa\" : \"#1d1d1d\",\r\n      position: \"relative !important\",\r\n    },\r\n    \"& .MuiDataGrid-colCellWrapper\": {\r\n      flex: 1,\r\n    },\r\n    \"& .MuiDataGrid-colCell\": {\r\n      padding: \"10px 16px\",\r\n      minHeight: 56,\r\n    },\r\n    \"& .MuiDataGrid-colCell:not(:last-child)\": {\r\n      borderRight: `1px solid ${\r\n        theme.palette.type === \"light\" ? \"#f0f0f0\" : \"#303030\"\r\n      }`,\r\n    },\r\n    \"& .MuiDataGrid-colCellTitle\": {\r\n      whiteSpace: \"normal !important\",\r\n      lineHeight: 1.5,\r\n      wordBreak: \"break-word\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n    \"& .MuiDataGrid-cell\": {\r\n      borderColor: `${theme.palette.type === \"light\" ? \"#f0f0f0\" : \"#303030\"}`,\r\n      whiteSpace: \"normal !important\",\r\n      lineHeight: \"1.5 !important\",\r\n      wordBreak: \"break-word\",\r\n      alignItems: \"center\",\r\n      display: \"flex\",\r\n      padding: \"10px 16px\",\r\n      maxHeight: \"none !important\",\r\n    },\r\n    \"& .MuiDataGrid-columnSeparator\": {\r\n      display: \"none\",\r\n    },\r\n    \"& .MuiDataGrid-footer\": {\r\n      padding: 15,\r\n      position: \"relative !important\",\r\n    },\r\n    \"& .MuiDataGrid-overlay\": {\r\n      backgroundColor: \"#FFFFFF\",\r\n    },\r\n    \"& .text-center\": {\r\n      justifyContent: \"center\",\r\n    },\r\n    \"& .text-left\": {\r\n      textAlign: \"left\",\r\n    },\r\n    \"& .gridbutton\": {\r\n      color: \"#FFFFFF\",\r\n      borderRadius: 5,\r\n      padding: 5,\r\n      margin: 5,\r\n    },\r\n    \"& .btnEdit\": {\r\n      backgroundColor: \"#3F51B5\",\r\n    },\r\n    \"& .btnEdit:hover\": {\r\n      backgroundColor: \"#1A237E\",\r\n    },\r\n    \"& .btnDelete\": {\r\n      backgroundColor: \"#E65100\",\r\n    },\r\n    \"& .btnDelete:hover\": {\r\n      backgroundColor: \"#BF360C\",\r\n    },\r\n    \"& .btnEdit.Mui-disabled, .btnDelete.Mui-disabled\": {\r\n      background: \"none\",\r\n      color: \"#BDBDBD\",\r\n    },\r\n  },\r\n  norecord: {\r\n    padding: theme.spacing(1),\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\ninterface DataGridProps {\r\n  columns: GridColDef[];\r\n  rows: any;\r\n}\r\n\r\nconst GridView = ({ columns, rows }: DataGridProps) => {\r\n  const classes = useStyles();\r\n\r\n  function CustomNoRowsOverlay() {\r\n    return (\r\n      <GridOverlay className={classes.root}>\r\n        <div className={classes.norecord}>\r\n          <img\r\n            src=\"/static/images/norecordfound.png\"\r\n            alt=\"No Records Available.\"\r\n            style={{ maxHeight: 100 }}\r\n          />\r\n        </div>\r\n      </GridOverlay>\r\n    );\r\n  }\r\n\r\n  function CustomPagination(props: GridBaseComponentProps) {\r\n    const { state, api } = props;\r\n    let currentPage = state.pagination.page + 1;\r\n\r\n    useEffect(() => {\r\n      if (state.pagination.page >= state.pagination.pageCount) {\r\n        currentPage = state.pagination.page;\r\n        api.current.setPage(currentPage - 1);\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        shape=\"rounded\"\r\n        page={currentPage}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => {\r\n          api.current.setPage(value - 1);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DataGrid\r\n      className={classes.root}\r\n      autoHeight={true}\r\n      disableColumnMenu={true}\r\n      disableColumnSelector={true}\r\n      disableSelectionOnClick={true}\r\n      showCellRightBorder={true}\r\n      showColumnRightBorder={true}\r\n      hideFooter={rows.length > 0 ? false : true}\r\n      pageSize={10}\r\n      components={{\r\n        Pagination: CustomPagination,\r\n        NoRowsOverlay: CustomNoRowsOverlay,\r\n      }}\r\n      getRowId={(row) => row._id}\r\n      rows={rows}\r\n      columns={columns}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GridView;\r\n","C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\services\\Auth.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\NavBar.tsx",[],"C:\\Users\\fs8-c\\OneDrive\\Desktop\\Cloudegic\\projfrontend1\\src\\layouts\\DashboardLayout\\NavItem.tsx",["299"],"import { NavLink as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Button,\r\n  ListItem,\r\n  makeStyles,\r\n  Theme,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  item: {\r\n    display: 'flex',\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n  },\r\n  button: {\r\n    color: theme.palette.text.secondary,\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    justifyContent: 'flex-start',\r\n    letterSpacing: 0,\r\n    padding: '10px 8px',\r\n    textTransform: 'none',\r\n    width: '100%',\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  title: {\r\n    marginRight: 'auto',\r\n  },\r\n  active: {\r\n    color: theme.palette.primary.main,\r\n    '& $title': {\r\n      fontWeight: theme.typography.fontWeightMedium,\r\n    },\r\n    '& $icon': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  className?: string;\r\n  href?: string;\r\n  onClick?: () => void;\r\n  icon: any;\r\n  title: string;\r\n  [key: string]: any;\r\n}\r\n\r\nconst NavItem = ({\r\n  className,\r\n  href,\r\n  onClick,\r\n  icon: Icon,\r\n  title,\r\n  ...rest\r\n}: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ListItem\r\n      className={clsx(classes.item, className)}\r\n      disableGutters\r\n      {...rest}\r\n    >\r\n      {href ? (\r\n        <Button\r\n          activeClassName={classes.active}\r\n          className={classes.button}\r\n          component={RouterLink}\r\n          to={href}\r\n        >\r\n          {Icon && <Icon className={classes.icon} size=\"20\" />}\r\n          <span className={classes.title}>{title}</span>\r\n        </Button>\r\n      ) : (\r\n        <Button className={classes.button} onClick={onClick}>\r\n          {Icon && <Icon className={classes.icon} size=\"20\" />}\r\n          <span className={classes.title}>{title}</span>\r\n        </Button>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default NavItem;\r\n",{"ruleId":"300","severity":1,"message":"301","line":4,"column":1,"nodeType":"302","endLine":41,"endColumn":3},{"ruleId":"303","severity":1,"message":"304","line":7,"column":8,"nodeType":"305","messageId":"306","endLine":7,"endColumn":22},{"ruleId":"303","severity":1,"message":"307","line":8,"column":8,"nodeType":"305","messageId":"306","endLine":8,"endColumn":15},{"ruleId":"308","severity":1,"message":"309","line":17,"column":3,"nodeType":"310","messageId":"311","endLine":19,"endColumn":4},{"ruleId":"308","severity":1,"message":"309","line":27,"column":3,"nodeType":"310","messageId":"311","endLine":29,"endColumn":4},{"ruleId":"308","severity":1,"message":"309","line":41,"column":3,"nodeType":"310","messageId":"311","endLine":43,"endColumn":4},{"ruleId":"303","severity":1,"message":"312","line":16,"column":8,"nodeType":"305","messageId":"306","endLine":16,"endColumn":15},{"ruleId":"313","severity":1,"message":"314","line":43,"column":6,"nodeType":"315","endLine":43,"endColumn":20,"suggestions":"316"},{"ruleId":"303","severity":1,"message":"317","line":13,"column":18,"nodeType":"305","messageId":"306","endLine":13,"endColumn":33},{"ruleId":"303","severity":1,"message":"318","line":23,"column":22,"nodeType":"305","messageId":"306","endLine":23,"endColumn":35},{"ruleId":"303","severity":1,"message":"319","line":23,"column":37,"nodeType":"305","messageId":"306","endLine":23,"endColumn":48},{"ruleId":"303","severity":1,"message":"320","line":82,"column":10,"nodeType":"305","messageId":"306","endLine":82,"endColumn":27},{"ruleId":"303","severity":1,"message":"321","line":112,"column":9,"nodeType":"305","messageId":"306","endLine":112,"endColumn":17},{"ruleId":"322","severity":1,"message":"323","line":115,"column":52,"nodeType":"324","messageId":"325","endLine":115,"endColumn":54},{"ruleId":"303","severity":1,"message":"326","line":126,"column":9,"nodeType":"305","messageId":"306","endLine":126,"endColumn":29},{"ruleId":"322","severity":1,"message":"323","line":129,"column":52,"nodeType":"324","messageId":"325","endLine":129,"endColumn":54},{"ruleId":"313","severity":1,"message":"327","line":199,"column":6,"nodeType":"315","endLine":199,"endColumn":8,"suggestions":"328"},{"ruleId":"322","severity":1,"message":"323","line":239,"column":36,"nodeType":"324","messageId":"325","endLine":239,"endColumn":38},{"ruleId":"322","severity":1,"message":"323","line":279,"column":49,"nodeType":"324","messageId":"325","endLine":279,"endColumn":51},{"ruleId":"303","severity":1,"message":"329","line":4,"column":3,"nodeType":"305","messageId":"306","endLine":4,"endColumn":9},{"ruleId":"303","severity":1,"message":"330","line":32,"column":25,"nodeType":"305","messageId":"306","endLine":32,"endColumn":35},{"ruleId":"303","severity":1,"message":"331","line":35,"column":8,"nodeType":"305","messageId":"306","endLine":35,"endColumn":19},{"ruleId":"303","severity":1,"message":"332","line":36,"column":8,"nodeType":"305","messageId":"306","endLine":36,"endColumn":14},{"ruleId":"303","severity":1,"message":"333","line":82,"column":10,"nodeType":"305","messageId":"306","endLine":82,"endColumn":15},{"ruleId":"303","severity":1,"message":"334","line":82,"column":17,"nodeType":"305","messageId":"306","endLine":82,"endColumn":25},{"ruleId":"303","severity":1,"message":"335","line":83,"column":10,"nodeType":"305","messageId":"306","endLine":83,"endColumn":27},{"ruleId":"303","severity":1,"message":"336","line":83,"column":29,"nodeType":"305","messageId":"306","endLine":83,"endColumn":49},{"ruleId":"303","severity":1,"message":"337","line":226,"column":9,"nodeType":"305","messageId":"306","endLine":226,"endColumn":26},{"ruleId":"322","severity":1,"message":"323","line":331,"column":54,"nodeType":"324","messageId":"325","endLine":331,"endColumn":56},{"ruleId":"338","severity":1,"message":"339","line":359,"column":41,"nodeType":"340","messageId":"341","endLine":359,"endColumn":43},{"ruleId":"313","severity":1,"message":"342","line":416,"column":6,"nodeType":"315","endLine":416,"endColumn":8,"suggestions":"343"},{"ruleId":"322","severity":1,"message":"323","line":84,"column":52,"nodeType":"324","messageId":"325","endLine":84,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":98,"column":52,"nodeType":"324","messageId":"325","endLine":98,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":112,"column":52,"nodeType":"324","messageId":"325","endLine":112,"endColumn":54},{"ruleId":"313","severity":1,"message":"344","line":155,"column":6,"nodeType":"315","endLine":155,"endColumn":8,"suggestions":"345"},{"ruleId":"322","severity":1,"message":"323","line":172,"column":54,"nodeType":"324","messageId":"325","endLine":172,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":174,"column":49,"nodeType":"324","messageId":"325","endLine":174,"endColumn":51},{"ruleId":"322","severity":1,"message":"323","line":195,"column":54,"nodeType":"324","messageId":"325","endLine":195,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":198,"column":49,"nodeType":"324","messageId":"325","endLine":198,"endColumn":51},{"ruleId":"303","severity":1,"message":"330","line":34,"column":25,"nodeType":"305","messageId":"306","endLine":34,"endColumn":35},{"ruleId":"322","severity":1,"message":"323","line":255,"column":52,"nodeType":"324","messageId":"325","endLine":255,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":269,"column":52,"nodeType":"324","messageId":"325","endLine":269,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":283,"column":52,"nodeType":"324","messageId":"325","endLine":283,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":300,"column":54,"nodeType":"324","messageId":"325","endLine":300,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":55,"column":58,"nodeType":"324","messageId":"325","endLine":55,"endColumn":60},{"ruleId":"313","severity":1,"message":"346","line":78,"column":8,"nodeType":"315","endLine":78,"endColumn":10,"suggestions":"347"},{"ruleId":"322","severity":1,"message":"323","line":85,"column":62,"nodeType":"324","messageId":"325","endLine":85,"endColumn":64},{"ruleId":"322","severity":1,"message":"323","line":88,"column":55,"nodeType":"324","messageId":"325","endLine":88,"endColumn":57},{"ruleId":"322","severity":1,"message":"323","line":97,"column":62,"nodeType":"324","messageId":"325","endLine":97,"endColumn":64},{"ruleId":"322","severity":1,"message":"323","line":101,"column":55,"nodeType":"324","messageId":"325","endLine":101,"endColumn":57},{"ruleId":"322","severity":1,"message":"323","line":115,"column":58,"nodeType":"324","messageId":"325","endLine":115,"endColumn":60},{"ruleId":"322","severity":1,"message":"323","line":134,"column":62,"nodeType":"324","messageId":"325","endLine":134,"endColumn":64},{"ruleId":"322","severity":1,"message":"323","line":39,"column":54,"nodeType":"324","messageId":"325","endLine":39,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":78,"column":66,"nodeType":"324","messageId":"325","endLine":78,"endColumn":68},{"ruleId":"348","severity":1,"message":"349","line":124,"column":29,"nodeType":"350","endLine":124,"endColumn":99},{"ruleId":"322","severity":1,"message":"323","line":50,"column":54,"nodeType":"324","messageId":"325","endLine":50,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":56,"column":59,"nodeType":"324","messageId":"325","endLine":56,"endColumn":61},{"ruleId":"300","severity":1,"message":"351","line":1,"column":1,"nodeType":"302","endLine":6,"endColumn":13},{"ruleId":"303","severity":1,"message":"352","line":8,"column":5,"nodeType":"305","messageId":"306","endLine":8,"endColumn":14},{"ruleId":"322","severity":1,"message":"323","line":33,"column":54,"nodeType":"324","messageId":"325","endLine":33,"endColumn":56},{"ruleId":"322","severity":1,"message":"323","line":37,"column":59,"nodeType":"324","messageId":"325","endLine":37,"endColumn":61},{"ruleId":"303","severity":1,"message":"353","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":20},{"ruleId":"303","severity":1,"message":"354","line":2,"column":22,"nodeType":"305","messageId":"306","endLine":2,"endColumn":27},{"ruleId":"308","severity":1,"message":"309","line":28,"column":3,"nodeType":"310","messageId":"311","endLine":30,"endColumn":4},{"ruleId":"322","severity":1,"message":"323","line":36,"column":42,"nodeType":"324","messageId":"325","endLine":36,"endColumn":44},{"ruleId":"322","severity":1,"message":"323","line":39,"column":49,"nodeType":"324","messageId":"325","endLine":39,"endColumn":51},{"ruleId":"322","severity":1,"message":"323","line":41,"column":49,"nodeType":"324","messageId":"325","endLine":41,"endColumn":51},{"ruleId":"308","severity":1,"message":"309","line":24,"column":3,"nodeType":"310","messageId":"311","endLine":26,"endColumn":4},{"ruleId":"322","severity":1,"message":"323","line":35,"column":42,"nodeType":"324","messageId":"325","endLine":35,"endColumn":44},{"ruleId":"322","severity":1,"message":"323","line":39,"column":47,"nodeType":"324","messageId":"325","endLine":39,"endColumn":49},{"ruleId":"322","severity":1,"message":"323","line":45,"column":42,"nodeType":"324","messageId":"325","endLine":45,"endColumn":44},{"ruleId":"303","severity":1,"message":"355","line":48,"column":17,"nodeType":"305","messageId":"306","endLine":48,"endColumn":26},{"ruleId":"303","severity":1,"message":"356","line":77,"column":11,"nodeType":"305","messageId":"306","endLine":77,"endColumn":16},{"ruleId":"313","severity":1,"message":"357","line":132,"column":23,"nodeType":"358","endLine":132,"endColumn":44},{"ruleId":"303","severity":1,"message":"354","line":7,"column":3,"nodeType":"305","messageId":"306","endLine":7,"endColumn":8},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'AssignmentIcon' is defined but never used.","Identifier","unusedVar","'PostAdd' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Spinner' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSubmit'. Either include it or remove the dependency array.","ArrayExpression",["359"],"'yupToFormErrors' is defined but never used.","'IRegisterUser' is defined but never used.","'IUpdateUser' is defined but never used.","'editableCandidate' is assigned a value but never used.","'getRoles' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getReportingManagers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CandidateId' and 'getCandidateById'. Either include them or remove the dependency array.",["360"],"'Avatar' is defined but never used.","'IUserShort' is defined but never used.","'getInitials' is defined but never used.","'moment' is defined but never used.","'roles' is assigned a value but never used.","'setRoles' is assigned a value but never used.","'reportingmanagers' is assigned a value but never used.","'setReportingManagers' is assigned a value but never used.","'convertTime24to12' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'loggedInUser'. Either include it or remove the dependency array.",["361"],"React Hook useEffect has missing dependencies: 'UserId' and 'getUserById'. Either include them or remove the dependency array.",["362"],"React Hook useEffect has a missing dependency: 'RoleId'. Either include it or remove the dependency array.",["363"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assign arrow function to a variable before exporting as module default","'Container' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'loginPath' is assigned a value but never used.","'login' is assigned a value but never used.","Assignments to the 'currentPage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression",{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},"Update the dependencies array to be: [handleSubmit, isSubmitting]",{"range":"374","text":"375"},"Update the dependencies array to be: [CandidateId, getCandidateById]",{"range":"376","text":"377"},"Update the dependencies array to be: [loggedInUser]",{"range":"378","text":"379"},"Update the dependencies array to be: [UserId, getUserById]",{"range":"380","text":"381"},"Update the dependencies array to be: [RoleId]",{"range":"382","text":"383"},[1123,1137],"[handleSubmit, isSubmitting]",[6100,6102],"[CandidateId, getCandidateById]",[11932,11934],"[loggedInUser]",[4605,4607],"[UserId, getUserById]",[2177,2179],"[RoleId]"]