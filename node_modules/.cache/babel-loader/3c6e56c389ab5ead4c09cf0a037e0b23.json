{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\routes\\\\index.tsx\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { SessionConsumer } from \"./../context/SessionContext\";\nimport { PROJECT_PATHS } from \"./../shared/constants\";\nimport MainLayout from \"../layouts/MainLayout/\";\nimport AuthContainer from \"./../containers/AuthContainer\";\nimport AdminDashboard from \"./../containers/AdminDashboard\";\nimport NotFoundView from \"../components/Errors/NotFoundView\";\nimport UserDashboard from \"../containers/UserDashboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst setRoutes = (isAuthenticated, user) => {\n  var _authPages$find;\n\n  let authPages = [];\n  let adminPages = [];\n  let managerPages = [];\n  let loggedInModePages = [];\n  const landingPagePath = (_authPages$find = authPages.find(x => x.pagename === \"landing\")) === null || _authPages$find === void 0 ? void 0 : _authPages$find.path;\n  authPages.push(...PROJECT_PATHS.Auth);\n  adminPages.push(...PROJECT_PATHS.Profile, ...PROJECT_PATHS.Admin);\n  managerPages.push(...PROJECT_PATHS.Profile, ...PROJECT_PATHS.Manager);\n  loggedInModePages.push(...PROJECT_PATHS.Profile, ...PROJECT_PATHS.Admin, ...PROJECT_PATHS.HiringManager, ...PROJECT_PATHS.Manager);\n\n  if (user) {\n    if (user.IsHost || user.Role.RoleName.toUpperCase() === \"ADMIN\") {\n      adminPages.push(...PROJECT_PATHS.Manager, ...PROJECT_PATHS.HiringManager);\n    } else if (user.Role.RoleName.toUpperCase() === \"HIRING MANAGER\") {\n      managerPages.push(...PROJECT_PATHS.HiringManager);\n    }\n  }\n\n  const authPaths = authPages.map(p => p.path);\n  const adminPaths = adminPages.map(p => p.path);\n  const managerPaths = managerPages.map(p => p.path);\n  const loggedInModePaths = loggedInModePages.map(p => p.path);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAuthenticated && user ? user.IsHost || user.Role.RoleName.toUpperCase() === \"ADMIN\" ? /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: adminPaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(AdminDashboard, {\n            pages: adminPages,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 24\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: authPaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: PROJECT_PATHS.Admin[0].path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 24\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(MainLayout, {\n            children: /*#__PURE__*/_jsxDEV(NotFoundView, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: managerPaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(UserDashboard, {\n            pages: managerPages,\n            user: user,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: authPaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: PROJECT_PATHS.Manager[0].path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 24\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(MainLayout, {\n            children: /*#__PURE__*/_jsxDEV(NotFoundView, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: authPaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(AuthContainer, {\n            pages: authPages,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 22\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: loggedInModePaths,\n        exact: true,\n        render: props => {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: landingPagePath\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 22\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(MainLayout, {\n            children: /*#__PURE__*/_jsxDEV(NotFoundView, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}; // If define as function component, you need to return from here and use tag (<Routes />) format in app.js\n\n\nconst Routes = /*#__PURE__*/_jsxDEV(SessionConsumer, {\n  children: context => setRoutes(context.isAuthenticated, context.user)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 137,\n  columnNumber: 3\n}, this);\n\nexport default Routes;","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/routes/index.tsx"],"names":["Switch","Route","Redirect","SessionConsumer","PROJECT_PATHS","MainLayout","AuthContainer","AdminDashboard","NotFoundView","UserDashboard","setRoutes","isAuthenticated","user","authPages","adminPages","managerPages","loggedInModePages","landingPagePath","find","x","pagename","path","push","Auth","Profile","Admin","Manager","HiringManager","IsHost","Role","RoleName","toUpperCase","authPaths","map","p","adminPaths","managerPaths","loggedInModePaths","props","Routes","context"],"mappings":"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","sourcesContent":["import { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { SessionConsumer } from \"./../context/SessionContext\";\r\nimport IPage from \"../classes/IPage\";\r\nimport ILoginUser from \"../classes/ILoginUser\";\r\nimport { PROJECT_PATHS } from \"./../shared/constants\";\r\nimport MainLayout from \"../layouts/MainLayout/\";\r\nimport AuthContainer from \"./../containers/AuthContainer\";\r\nimport AdminDashboard from \"./../containers/AdminDashboard\";\r\nimport NotFoundView from \"../components/Errors/NotFoundView\";\r\nimport UserDashboard from \"../containers/UserDashboard\";\r\n\r\nconst setRoutes = (isAuthenticated: boolean, user?: ILoginUser) => {\r\n  let authPages: IPage[] = [];\r\n  let adminPages: IPage[] = [];\r\n  let managerPages: IPage[] = [];\r\n  let loggedInModePages: IPage[] = [];\r\n  const landingPagePath = authPages.find((x) => x.pagename === \"landing\")\r\n    ?.path as string;\r\n\r\n  authPages.push(...PROJECT_PATHS.Auth);\r\n  adminPages.push(...PROJECT_PATHS.Profile, ...PROJECT_PATHS.Admin);\r\n  managerPages.push(...PROJECT_PATHS.Profile, ...PROJECT_PATHS.Manager);\r\n  loggedInModePages.push(\r\n    ...PROJECT_PATHS.Profile,\r\n    ...PROJECT_PATHS.Admin,\r\n    ...PROJECT_PATHS.HiringManager,\r\n    ...PROJECT_PATHS.Manager\r\n  );\r\n\r\n  if (user) {\r\n    if (user.IsHost || user.Role.RoleName.toUpperCase() === \"ADMIN\") {\r\n      adminPages.push(...PROJECT_PATHS.Manager, ...PROJECT_PATHS.HiringManager);\r\n    } else if (user.Role.RoleName.toUpperCase() === \"HIRING MANAGER\") {\r\n      managerPages.push(...PROJECT_PATHS.HiringManager);\r\n    }\r\n  }\r\n\r\n  const authPaths = authPages.map((p) => p.path);\r\n  const adminPaths = adminPages.map((p) => p.path);\r\n  const managerPaths = managerPages.map((p) => p.path);\r\n  const loggedInModePaths = loggedInModePages.map((p) => p.path);\r\n\r\n  return (\r\n    <>\r\n      {isAuthenticated && user ? (\r\n        user.IsHost || user.Role.RoleName.toUpperCase() === \"ADMIN\" ? (\r\n          <Switch>\r\n            <Route\r\n              path={adminPaths}\r\n              exact={true}\r\n              render={(props) => {\r\n                return <AdminDashboard pages={adminPages} {...props} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path={authPaths}\r\n              exact={true}\r\n              render={(props) => {\r\n                return <Redirect to={PROJECT_PATHS.Admin[0].path} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"*\"\r\n              render={() => {\r\n                return (\r\n                  <MainLayout>\r\n                    <NotFoundView />\r\n                  </MainLayout>\r\n                );\r\n              }}\r\n            />\r\n          </Switch>\r\n        ) : (\r\n          <Switch>\r\n            <Route\r\n              path={managerPaths}\r\n              exact={true}\r\n              render={(props) => {\r\n                return (\r\n                  <UserDashboard pages={managerPages} user={user} {...props} />\r\n                );\r\n              }}\r\n            />\r\n            <Route\r\n              path={authPaths}\r\n              exact={true}\r\n              render={(props) => {\r\n                return <Redirect to={PROJECT_PATHS.Manager[0].path} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"*\"\r\n              render={() => {\r\n                return (\r\n                  <MainLayout>\r\n                    <NotFoundView />\r\n                  </MainLayout>\r\n                );\r\n              }}\r\n            />\r\n          </Switch>\r\n        )\r\n      ) : (\r\n        <Switch>\r\n          <Route\r\n            path={authPaths}\r\n            exact={true}\r\n            render={(props) => {\r\n              return <AuthContainer pages={authPages} {...props} />;\r\n            }}\r\n          />\r\n          <Route\r\n            path={loggedInModePaths}\r\n            exact={true}\r\n            render={(props) => {\r\n              return <Redirect to={landingPagePath} />;\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"*\"\r\n            render={() => {\r\n              return (\r\n                <MainLayout>\r\n                  <NotFoundView />\r\n                </MainLayout>\r\n              );\r\n            }}\r\n          />\r\n        </Switch>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// If define as function component, you need to return from here and use tag (<Routes />) format in app.js\r\nconst Routes = (\r\n  <SessionConsumer>\r\n    {(context) => setRoutes(context.isAuthenticated, context.user)}\r\n  </SessionConsumer>\r\n);\r\n\r\nexport default Routes;\r\n"]},"metadata":{},"sourceType":"module"}