{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\Admin\\\\Role\\\\ManageRole.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { Box, Button, Card, Grid, InputAdornment, SvgIcon, TextField } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { getRolesRequest, deleteRoleRequest } from \"../../../services/Admin\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport GridView from \"../../DataGrid\";\nimport DialogBox from \"../../DialogBox\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  mbottom: {\n    marginBottom: theme.spacing(3)\n  }\n}));\n\nconst ManageRole = () => {\n  _s();\n\n  var _PROJECT_PATHS$Admin$, _PROJECT_PATHS$Admin$2;\n\n  const classes = useStyles();\n  const initialDialogState = {\n    open: false,\n    title: 'Delete Role',\n    description: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Are you sure you want to delete this role?\"\n    }, void 0, false),\n    RoleId: ''\n  };\n  const [loading, setloading] = useState(true);\n  const [rows, setrows] = useState([]);\n  const [originalData, setOriginalData] = useState([]);\n  const [submmitting, setsubmmitting] = useState(false);\n  const [dialog, setdialog] = useState(initialDialogState);\n  const addRolePath = (_PROJECT_PATHS$Admin$ = PROJECT_PATHS.Admin.find(x => x.pagename === 'addrole')) === null || _PROJECT_PATHS$Admin$ === void 0 ? void 0 : _PROJECT_PATHS$Admin$.path;\n  const editRolePath = (_PROJECT_PATHS$Admin$2 = PROJECT_PATHS.Admin.find(x => x.pagename === 'editrole')) === null || _PROJECT_PATHS$Admin$2 === void 0 ? void 0 : _PROJECT_PATHS$Admin$2.path;\n  const columns = [{\n    field: 'RoleName',\n    headerName: 'Role Name',\n    flex: 1\n  }, {\n    field: ' ',\n    headerName: ' ',\n    cellClassName: 'text-center',\n    width: 200,\n    sortable: false,\n    renderCell: params => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: params.row.IsPublic && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          className: \"gridbutton btnEdit\",\n          \"aria-label\": \"edit\",\n          disabled: submmitting,\n          href: editRolePath.replace(':id', `${params.row._id}`),\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          className: \"gridbutton btnDelete\",\n          \"aria-label\": \"delete\",\n          disabled: submmitting,\n          onClick: () => showDialogBox(`${params.row._id}`, `${params.row.RoleName}`),\n          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)\n  }];\n\n  const showDialogBox = (RoleId, RoleName) => {\n    let popupdesc = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Are you sure you want to delete this role - \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"\\\"\", RoleName, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 71\n      }, this), \"?\"]\n    }, void 0, true);\n\n    setdialog({ ...dialog,\n      open: true,\n      description: popupdesc,\n      RoleId: RoleId\n    });\n  };\n\n  const closeDialogBox = () => {\n    setdialog({ ...dialog,\n      open: false,\n      RoleId: ''\n    });\n  };\n\n  const getRoles = async () => {\n    try {\n      const response = await getRolesRequest();\n\n      if (response && response.Status.ResponseCode == 200) {\n        const gridrows = response.Roles;\n        setrows(gridrows);\n        setOriginalData(gridrows);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const deleteRole = async () => {\n    try {\n      const RoleId = dialog.RoleId;\n\n      if (RoleId) {\n        const response = await deleteRoleRequest(RoleId);\n\n        if (response && response.Status.ResponseCode == 200) {\n          await getRoles();\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n\n    setsubmmitting(false);\n    closeDialogBox();\n  };\n\n  const handleSearchChange = e => {\n    if (e.target.value) {\n      let gridrows = originalData;\n      gridrows = gridrows.filter(item => item.RoleName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1);\n      setrows(gridrows);\n    } else {\n      setrows(originalData);\n    }\n  };\n\n  useEffect(() => {\n    (async function execPreLoadFunctions() {\n      await getRoles();\n      setloading(false);\n    })();\n  }, []); // <-- Have to pass [] here, to make single call of api. It will work as componentDidMount. If it will not be passed, function will be called in every render and it will work as componentDidUpdate.\n\n  return /*#__PURE__*/_jsxDEV(DashboardPage, {\n    title: \"Manage Roles\",\n    children: !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 9,\n            sm: 6,\n            xs: 12,\n            className: classes.mbottom,\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              size: \"large\",\n              variant: \"contained\",\n              startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 48\n              }, this),\n              href: addRolePath,\n              children: \"Add Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 3,\n            sm: 6,\n            xs: 12,\n            className: classes.mbottom,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              size: \"small\",\n              placeholder: \"Search...\",\n              variant: \"outlined\",\n              InputProps: {\n                startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"start\",\n                  children: /*#__PURE__*/_jsxDEV(SvgIcon, {\n                    fontSize: \"small\",\n                    color: \"disabled\",\n                    children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 199,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 45\n                }, this)\n              },\n              onChange: handleSearchChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            minWidth: 800,\n            children: /*#__PURE__*/_jsxDEV(GridView, {\n              columns: columns,\n              rows: rows\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DialogBox, {\n          open: dialog.open,\n          title: dialog.title,\n          description: dialog.description,\n          isSubmitting: submmitting,\n          onDialogAction: isAgree => {\n            if (isAgree) {\n              setsubmmitting(true);\n              deleteRole();\n            } else {\n              closeDialogBox();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ManageRole, \"jkToXyzGvsiBWy4c7pjcHrCn9e8=\", false, function () {\n  return [useStyles];\n});\n\n_c = ManageRole;\nexport default ManageRole;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageRole\");","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/Admin/Role/ManageRole.tsx"],"names":["useState","useEffect","PerfectScrollbar","Box","Button","Card","Grid","InputAdornment","SvgIcon","TextField","makeStyles","IconButton","AddIcon","EditIcon","DeleteIcon","SearchIcon","getRolesRequest","deleteRoleRequest","PROJECT_PATHS","DashboardPage","GridView","DialogBox","snackbarAlert","Spinner","useStyles","theme","mbottom","marginBottom","spacing","ManageRole","classes","initialDialogState","open","title","description","RoleId","loading","setloading","rows","setrows","originalData","setOriginalData","submmitting","setsubmmitting","dialog","setdialog","addRolePath","Admin","find","x","pagename","path","editRolePath","columns","field","headerName","flex","cellClassName","width","sortable","renderCell","params","row","IsPublic","replace","_id","showDialogBox","RoleName","popupdesc","closeDialogBox","getRoles","response","Status","ResponseCode","gridrows","Roles","error","deleteRole","handleSearchChange","e","target","value","filter","item","toLowerCase","indexOf","execPreLoadFunctions","textAlign","startAdornment","isAgree"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport {\n    Box,\n    Button,\n    Card,\n    Grid,\n    InputAdornment,\n    SvgIcon,\n    TextField\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { GridColDef, GridCellParams } from \"@material-ui/data-grid\";\nimport { getRolesRequest, deleteRoleRequest } from \"../../../services/Admin\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport IRole from \"../../../classes/IRole\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport GridView from \"../../DataGrid\";\nimport DialogBox from \"../../DialogBox\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mbottom: {\n        marginBottom: theme.spacing(3),\n    }\n}));\n\nconst ManageRole = () => {\n    const classes = useStyles();\n\n    const initialDialogState = {\n        open: false,\n        title: 'Delete Role',\n        description: <>Are you sure you want to delete this role?</>,\n        RoleId: ''\n    };\n\n    const [loading, setloading] = useState(true);\n    const [rows, setrows] = useState([] as IRole[]);\n    const [originalData, setOriginalData] = useState([] as IRole[]);\n    const [submmitting, setsubmmitting] = useState(false);\n    const [dialog, setdialog] = useState(initialDialogState);\n\n    const addRolePath = PROJECT_PATHS.Admin.find(x => x.pagename === 'addrole')?.path as string;\n    const editRolePath = PROJECT_PATHS.Admin.find(x => x.pagename === 'editrole')?.path as string;\n\n    const columns: GridColDef[] = [\n        {\n            field: 'RoleName',\n            headerName: 'Role Name',\n            flex: 1\n        },\n        {\n            field: ' ',\n            headerName: ' ',\n            cellClassName: 'text-center',\n            width: 200,\n            sortable: false,\n            renderCell: (params: GridCellParams) => (\n                <>\n                    {params.row.IsPublic &&\n                        <>\n                            <IconButton\n                                size=\"small\"\n                                className=\"gridbutton btnEdit\"\n                                aria-label=\"edit\"\n                                disabled={submmitting}\n                                href={editRolePath.replace(':id', `${params.row._id}`)}\n                            >\n                                <EditIcon />\n                            </IconButton>\n                            <IconButton\n                                size=\"small\"\n                                className=\"gridbutton btnDelete\"\n                                aria-label=\"delete\"\n                                disabled={submmitting}\n                                onClick={() => showDialogBox(`${params.row._id}`, `${params.row.RoleName}`)}\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </>\n                    }\n                </>\n            )\n        }\n    ];\n\n    const showDialogBox = (RoleId: string, RoleName: string) => {\n        let popupdesc = <>Are you sure you want to delete this role - <b>\"{RoleName}\"</b>?</>;\n        setdialog({\n            ...dialog,\n            open: true,\n            description: popupdesc,\n            RoleId: RoleId\n        })\n    };\n\n    const closeDialogBox = () => {\n        setdialog({\n            ...dialog,\n            open: false,\n            RoleId: ''\n        })\n    };\n\n    const getRoles = async () => {\n        try {\n            const response = await getRolesRequest();\n            if (response && response.Status.ResponseCode == 200) {\n                const gridrows: IRole[] = response.Roles;\n                setrows(gridrows);\n                setOriginalData(gridrows);\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    const deleteRole = async () => {\n        try {\n            const RoleId = dialog.RoleId;\n            if (RoleId) {\n                const response = await deleteRoleRequest(RoleId);\n                if (response && response.Status.ResponseCode == 200) {\n                    await getRoles();\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke!\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n        setsubmmitting(false);\n        closeDialogBox();\n    }\n\n    const handleSearchChange = (e: any) => {\n        if (e.target.value) {\n            let gridrows = originalData;\n            gridrows = gridrows.filter(item => item.RoleName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1);\n            setrows(gridrows);\n        } else {\n            setrows(originalData);\n        }\n    };\n\n    useEffect(() => {\n        (async function execPreLoadFunctions() {\n            await getRoles();\n            setloading(false);\n        }());\n    }, []); // <-- Have to pass [] here, to make single call of api. It will work as componentDidMount. If it will not be passed, function will be called in every render and it will work as componentDidUpdate.\n\n    return (\n        <DashboardPage title=\"Manage Roles\">\n            {(!loading) ?\n                <>\n                    <Box mt={2}>\n                        <Grid container>\n                            <Grid item md={9} sm={6} xs={12} className={classes.mbottom} style={{ textAlign: 'left' }}>\n                                <Button\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    variant=\"contained\"\n                                    startIcon={<AddIcon />}\n                                    href={addRolePath}\n                                >\n                                    Add Role\n                                </Button>\n                            </Grid>\n                            <Grid item md={3} sm={6} xs={12} className={classes.mbottom}>\n                                <TextField\n                                    fullWidth\n                                    size=\"small\"\n                                    placeholder=\"Search...\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <SvgIcon\n                                                    fontSize=\"small\"\n                                                    color=\"disabled\"\n                                                >\n                                                    <SearchIcon />\n                                                </SvgIcon>\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                    onChange={handleSearchChange}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <Card>\n                        <PerfectScrollbar>\n                            <Box minWidth={800}>\n                                <GridView columns={columns} rows={rows} />\n                            </Box>\n                        </PerfectScrollbar>\n                        <DialogBox\n                            open={dialog.open}\n                            title={dialog.title}\n                            description={dialog.description}\n                            isSubmitting={submmitting}\n                            onDialogAction={(isAgree: boolean) => {\n                                if (isAgree) {\n                                    setsubmmitting(true);\n                                    deleteRole();\n                                } else {\n                                    closeDialogBox();\n                                }\n                            }}\n                        />\n                    </Card>\n                </>\n                :\n                <Spinner />\n            }\n        </DashboardPage>\n    );\n};\n\nexport default ManageRole;\n"]},"metadata":{},"sourceType":"module"}