{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\Admin\\\\User\\\\AddUser.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { Box, Button, Card, CardHeader, Divider, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { getRolesRequest, getReportingManagersRequest, getUserByIdRequest, registerUserRequest, updateUserRequest } from \"../../../services/Admin\";\nimport { PROJECT_PATHS, NumbersRegExp } from \"../../../shared/constants\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  mainBox: {\n    maxWidth: 800,\n    margin: \"16px auto 0\"\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst AddUser = props => {\n  _s();\n\n  var _PROJECT_PATHS$Admin$;\n\n  const classes = useStyles();\n  const loggedInUser = useContext(SessionContext).user;\n  const UserId = props.match.params.id;\n  const manageUserPath = (_PROJECT_PATHS$Admin$ = PROJECT_PATHS.Admin.find(x => x.pagename === \"viewusers\")) === null || _PROJECT_PATHS$Admin$ === void 0 ? void 0 : _PROJECT_PATHS$Admin$.path;\n  const [loading, setLoading] = useState(true);\n  const [roles, setRoles] = useState([]);\n  const [reportingmanagers, setReportingManagers] = useState([]);\n  const [editableUser, setEditableUser] = useState(undefined);\n  const [initialValues, setInitialValues] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    password: \"\",\n    phone: \"\",\n    employeecode: \"\",\n    designation: \"\",\n    role: \"\",\n    reportingmanager: \"\"\n  });\n\n  const getRoles = async () => {\n    try {\n      const response = await getRolesRequest();\n\n      if (response && response.Status.ResponseCode == 200) {\n        const drp_roles = response.Roles;\n        setRoles(drp_roles);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const getReportingManagers = async () => {\n    try {\n      const response = await getReportingManagersRequest();\n\n      if (response && response.Status.ResponseCode == 200) {\n        const drp_users = response.Users;\n        setReportingManagers(drp_users);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const getUserById = async UserId => {\n    try {\n      const response = await getUserByIdRequest(UserId);\n\n      if (response && response.Status.ResponseCode == 200) {\n        const User = response.User;\n\n        if (User && (loggedInUser.IsHost || loggedInUser.IsSuperAdmin && !User.IsSuperAdmin || loggedInUser._id === User._id || loggedInUser._id === User.CreatedBy || User.Role.RoleName.toLowerCase() !== \"admin\")) {\n          setEditableUser(User);\n          setInitialValues({\n            firstname: User.FirstName,\n            lastname: User.LastName,\n            email: User.Email,\n            phone: User.Phone,\n            employeecode: User.EmployeeCode,\n            designation: User.Designation,\n            role: User.Role._id,\n            reportingmanager: User.ReportingManager._id\n          });\n          setLoading(false);\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  useEffect(() => {\n    (async function execPreLoadFunctions() {\n      await getRoles();\n      await getReportingManagers();\n\n      if (UserId) {\n        await getUserById(UserId);\n      } else {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const handleSubmit = async (values, {\n    resetForm\n  }) => {\n    try {\n      if (UserId) {\n        const user = {\n          FirstName: values.firstname,\n          LastName: values.lastname,\n          Phone: values.phone,\n          Email: values.email,\n          EmployeeCode: values.employeecode,\n          Designation: values.designation,\n          RoleId: values.role,\n          ReportingManagerId: values.reportingmanager,\n          ModifiedBy: loggedInUser._id\n        };\n        const response = await updateUserRequest(UserId, user);\n\n        if (response && response.Status.ResponseCode == 200) {\n          props.history.push(manageUserPath);\n        } else if (response.Status.ResponseCode == 205) {\n          snackbarAlert.warning(\"Email or phone already exists! Please enter unique one.\");\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      } else {\n        const user = {\n          FirstName: values.firstname,\n          LastName: values.lastname,\n          Phone: values.phone,\n          Email: values.email,\n          Password: values.password,\n          EmployeeCode: values.employeecode,\n          Designation: values.designation,\n          RoleId: values.role,\n          ReportingManagerId: values.reportingmanager,\n          CreatedBy: loggedInUser._id\n        };\n        const response = await registerUserRequest(user);\n\n        if (response && response.Status.ResponseCode == 200) {\n          snackbarAlert.success(\"User registered successfully!\");\n          resetForm();\n        } else if (response.Status.ResponseCode == 205) {\n          snackbarAlert.warning(\"Email or phone already exists! Please enter unique one.\");\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    firstname: Yup.string().min(2, \"First name should be minimum 2 characters!\").max(100, \"First name should be maximum 100 characters!\").required(\"First name is required!\"),\n    lastname: Yup.string().min(2, \"Last name should be minimum 2 characters!\").max(100, \"Last name should be maximum 100 characters!\").required(\"Last name is required!\"),\n    email: Yup.string().email(\"Must be a valid email!\").max(100, \"Email should be maximum 100 characters!\").required(\"Email is required!\"),\n    password: !UserId ? Yup.string().min(7, \"Password should be minimum 7 characters!\").max(100, \"Password should be maximum 100 characters!\").required(\"Password is required!\") : Yup.string(),\n    phone: Yup.string().min(10, \"Phone number should be 10 digits!\").max(10, \"Phone number should be 10 digits!\").matches(NumbersRegExp, \"Must be a valid phone number!\").required(\"Phone number is required!\"),\n    employeecode: Yup.string().max(100, \"Employee code should be maximum 100 characters!\").required(\"Employee code is required!\"),\n    designation: Yup.string().max(100, \"Designation should be maximum 100 characters!\").required(\"Designation is required!\"),\n    role: Yup.string().required(\"Role is required!\"),\n    reportingmanager: Yup.string().required(\"Reporting manager is required!\")\n  });\n  return /*#__PURE__*/_jsxDEV(DashboardPage, {\n    title: UserId ? \"Manage Users | Edit User\" : \"Manage Users | Register User\",\n    children: !loading ? /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.mainBox,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: handleSubmit,\n        children: ({\n          errors,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          touched,\n          values\n        }) => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              subheader: UserId ? \"Please change the below details to update user.\" : \"Please fill the below details to register user.\",\n              title: UserId ? \"Edit User\" : \"Register User\",\n              style: {\n                textAlign: \"center\"\n              },\n              titleTypographyProps: {\n                variant: \"h3\",\n                component: \"h3\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              p: 3,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"First Name\",\n                    name: \"firstname\",\n                    value: values.firstname,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.firstname && errors.firstname),\n                    helperText: touched.firstname && errors.firstname\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Last Name\",\n                    name: \"lastname\",\n                    value: values.lastname,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.lastname && errors.lastname),\n                    helperText: touched.lastname && errors.lastname\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Email\",\n                    name: \"email\",\n                    type: \"email\",\n                    value: values.email,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.email && errors.email),\n                    helperText: touched.email && errors.email\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 23\n                }, this), !UserId && /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Password\",\n                    name: \"password\",\n                    type: \"password\",\n                    value: values.password,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onBlur: handleBlur,\n                    onChange: handleChange,\n                    error: Boolean(touched.password && errors.password),\n                    helperText: touched.password && errors.password\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Phone Number\",\n                    name: \"phone\",\n                    value: values.phone,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 10\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.phone && errors.phone),\n                    helperText: touched.phone && errors.phone\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Employee Code\",\n                    name: \"employeecode\",\n                    value: values.employeecode,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.employeecode && errors.employeecode),\n                    helperText: touched.employeecode && errors.employeecode\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Designation\",\n                    name: \"designation\",\n                    value: values.designation,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.designation && errors.designation),\n                    helperText: touched.designation && errors.designation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 376,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    fullWidth: true,\n                    label: \"Select Role\",\n                    name: \"role\",\n                    value: values.role,\n                    variant: \"outlined\",\n                    disabled: editableUser && editableUser.Role.RoleName.toLowerCase() === \"admin\" && editableUser._id === loggedInUser._id ? true : false,\n                    SelectProps: {\n                      native: true\n                    },\n                    InputLabelProps: {\n                      shrink: true\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.role && errors.role),\n                    helperText: touched.role && errors.role,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"- None -\"\n                    }, \"-1\", false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 27\n                    }, this), roles.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: option._id,\n                      children: option.RoleName\n                    }, option._id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 6,\n                  sm: 6,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    fullWidth: true,\n                    label: \"Select Reporting Manager\",\n                    name: \"reportingmanager\",\n                    value: values.reportingmanager,\n                    variant: \"outlined\",\n                    disabled: editableUser && editableUser.Role.RoleName.toLowerCase() === \"admin\" && editableUser._id === loggedInUser._id ? true : false,\n                    SelectProps: {\n                      native: true\n                    },\n                    InputLabelProps: {\n                      shrink: true\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.reportingmanager && errors.reportingmanager),\n                    helperText: touched.reportingmanager && errors.reportingmanager,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"- None -\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 451,\n                      columnNumber: 27\n                    }, this), reportingmanagers.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: option._id,\n                      children: option.Name\n                    }, option._id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              justifyContent: \"center\",\n              p: 1,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                disabled: isSubmitting,\n                size: \"large\",\n                type: \"submit\",\n                variant: \"contained\",\n                className: classes.button,\n                children: isSubmitting ? \"Please wait...\" : UserId ? \"Update\" : \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"secondary\",\n                size: \"large\",\n                variant: \"contained\",\n                className: classes.button,\n                href: manageUserPath,\n                children: UserId ? \"Cancel\" : \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddUser, \"pbokEi/PCQcKg7mUK+MfUJ08Wc4=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/Admin/User/AddUser.tsx"],"names":["useState","useEffect","useContext","Box","Button","Card","CardHeader","Divider","Grid","TextField","makeStyles","Yup","Formik","getRolesRequest","getReportingManagersRequest","getUserByIdRequest","registerUserRequest","updateUserRequest","PROJECT_PATHS","NumbersRegExp","DashboardPage","SessionContext","snackbarAlert","Spinner","useStyles","theme","mainBox","maxWidth","margin","button","spacing","AddUser","props","classes","loggedInUser","user","UserId","match","params","id","manageUserPath","Admin","find","x","pagename","path","loading","setLoading","roles","setRoles","reportingmanagers","setReportingManagers","editableUser","setEditableUser","undefined","initialValues","setInitialValues","firstname","lastname","email","password","phone","employeecode","designation","role","reportingmanager","getRoles","response","Status","ResponseCode","drp_roles","Roles","error","getReportingManagers","drp_users","Users","getUserById","User","IsHost","IsSuperAdmin","_id","CreatedBy","Role","RoleName","toLowerCase","FirstName","LastName","Email","Phone","EmployeeCode","Designation","ReportingManager","execPreLoadFunctions","handleSubmit","values","resetForm","RoleId","ReportingManagerId","ModifiedBy","history","push","warning","Password","success","validationSchema","object","shape","string","min","max","required","matches","errors","handleBlur","handleChange","isSubmitting","touched","textAlign","variant","component","maxLength","Boolean","native","shrink","map","option","Name"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  getRolesRequest,\r\n  getReportingManagersRequest,\r\n  getUserByIdRequest,\r\n  registerUserRequest,\r\n  updateUserRequest,\r\n} from \"../../../services/Admin\";\r\nimport { IUserDropdown } from \"../../../classes/IUserShort\";\r\nimport IRole from \"../../../classes/IRole\";\r\nimport { IUser, IRegisterUser, IUpdateUser } from \"../../../classes/IUser\";\r\nimport ILoginUser from \"../../../classes/ILoginUser\";\r\nimport { PROJECT_PATHS, NumbersRegExp } from \"../../../shared/constants\";\r\nimport DashboardPage from \"../../Page/DashboardPage\";\r\nimport SessionContext from \"../../../context/SessionContext\";\r\nimport snackbarAlert from \"../../SnackbarAlert\";\r\nimport Spinner from \"../../Spinner\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  mainBox: {\r\n    maxWidth: 800,\r\n    margin: \"16px auto 0\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport interface IFormValues {\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  password?: string;\r\n  phone: number | \"\";\r\n  employeecode: string;\r\n  designation: string;\r\n  role: string;\r\n  reportingmanager: string;\r\n}\r\n\r\nconst AddUser = (props: any) => {\r\n  const classes = useStyles();\r\n  const loggedInUser = useContext(SessionContext).user as ILoginUser;\r\n  const UserId = props.match.params.id;\r\n  const manageUserPath = PROJECT_PATHS.Admin.find(\r\n    (x) => x.pagename === \"viewusers\"\r\n  )?.path as string;\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [roles, setRoles] = useState([] as IRole[]);\r\n  const [reportingmanagers, setReportingManagers] = useState(\r\n    [] as IUserDropdown[]\r\n  );\r\n  const [editableUser, setEditableUser] = useState(\r\n    undefined as IUser | undefined\r\n  );\r\n  const [initialValues, setInitialValues] = useState({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    phone: \"\",\r\n    employeecode: \"\",\r\n    designation: \"\",\r\n    role: \"\",\r\n    reportingmanager: \"\",\r\n  } as IFormValues);\r\n\r\n  const getRoles = async () => {\r\n    try {\r\n      const response = await getRolesRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_roles: IRole[] = response.Roles;\r\n        setRoles(drp_roles);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getReportingManagers = async () => {\r\n    try {\r\n      const response = await getReportingManagersRequest();\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const drp_users: IUserDropdown[] = response.Users;\r\n        setReportingManagers(drp_users);\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const getUserById = async (UserId: string) => {\r\n    try {\r\n      const response = await getUserByIdRequest(UserId);\r\n      if (response && response.Status.ResponseCode == 200) {\r\n        const User: IUser | undefined = response.User;\r\n        if (\r\n          User &&\r\n          (loggedInUser.IsHost ||\r\n            (loggedInUser.IsSuperAdmin && !User.IsSuperAdmin) ||\r\n            loggedInUser._id === User._id ||\r\n            loggedInUser._id === User.CreatedBy ||\r\n            User.Role.RoleName.toLowerCase() !== \"admin\")\r\n        ) {\r\n          setEditableUser(User);\r\n          setInitialValues({\r\n            firstname: User.FirstName,\r\n            lastname: User.LastName,\r\n            email: User.Email,\r\n            phone: User.Phone,\r\n            employeecode: User.EmployeeCode,\r\n            designation: User.Designation,\r\n            role: User.Role._id,\r\n            reportingmanager: User.ReportingManager._id,\r\n          });\r\n          setLoading(false);\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke!\");\r\n        }\r\n      } else {\r\n        snackbarAlert.error(\"Oops! Something Broke!\");\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function execPreLoadFunctions() {\r\n      await getRoles();\r\n      await getReportingManagers();\r\n      if (UserId) {\r\n        await getUserById(UserId);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\r\n    try {\r\n      if (UserId) {\r\n        const user: IUpdateUser = {\r\n          FirstName: values.firstname,\r\n          LastName: values.lastname,\r\n          Phone: values.phone as number,\r\n          Email: values.email,\r\n          EmployeeCode: values.employeecode,\r\n          Designation: values.designation,\r\n          RoleId: values.role,\r\n          ReportingManagerId: values.reportingmanager,\r\n          ModifiedBy: loggedInUser._id,\r\n        };\r\n        const response = await updateUserRequest(UserId, user);\r\n        if (response && response.Status.ResponseCode == 200) {\r\n          props.history.push(manageUserPath);\r\n        } else if (response.Status.ResponseCode == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      } else {\r\n        const user: IRegisterUser = {\r\n          FirstName: values.firstname,\r\n          LastName: values.lastname,\r\n          Phone: values.phone as number,\r\n          Email: values.email,\r\n          Password: values.password as string,\r\n          EmployeeCode: values.employeecode,\r\n          Designation: values.designation,\r\n          RoleId: values.role,\r\n          ReportingManagerId: values.reportingmanager,\r\n          CreatedBy: loggedInUser._id,\r\n        };\r\n        const response = await registerUserRequest(user);\r\n        if (response && response.Status.ResponseCode == 200) {\r\n          snackbarAlert.success(\"User registered successfully!\");\r\n          resetForm();\r\n        } else if (response.Status.ResponseCode == 205) {\r\n          snackbarAlert.warning(\r\n            \"Email or phone already exists! Please enter unique one.\"\r\n          );\r\n        } else {\r\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      snackbarAlert.error(\"Oops! Something Broke!\");\r\n    }\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    firstname: Yup.string()\r\n      .min(2, \"First name should be minimum 2 characters!\")\r\n      .max(100, \"First name should be maximum 100 characters!\")\r\n      .required(\"First name is required!\"),\r\n    lastname: Yup.string()\r\n      .min(2, \"Last name should be minimum 2 characters!\")\r\n      .max(100, \"Last name should be maximum 100 characters!\")\r\n      .required(\"Last name is required!\"),\r\n    email: Yup.string()\r\n      .email(\"Must be a valid email!\")\r\n      .max(100, \"Email should be maximum 100 characters!\")\r\n      .required(\"Email is required!\"),\r\n    password: !UserId\r\n      ? Yup.string()\r\n          .min(7, \"Password should be minimum 7 characters!\")\r\n          .max(100, \"Password should be maximum 100 characters!\")\r\n          .required(\"Password is required!\")\r\n      : Yup.string(),\r\n    phone: Yup.string()\r\n      .min(10, \"Phone number should be 10 digits!\")\r\n      .max(10, \"Phone number should be 10 digits!\")\r\n      .matches(NumbersRegExp, \"Must be a valid phone number!\")\r\n      .required(\"Phone number is required!\"),\r\n    employeecode: Yup.string()\r\n      .max(100, \"Employee code should be maximum 100 characters!\")\r\n      .required(\"Employee code is required!\"),\r\n    designation: Yup.string()\r\n      .max(100, \"Designation should be maximum 100 characters!\")\r\n      .required(\"Designation is required!\"),\r\n    role: Yup.string().required(\"Role is required!\"),\r\n    reportingmanager: Yup.string().required(\"Reporting manager is required!\"),\r\n  });\r\n\r\n  return (\r\n    <DashboardPage\r\n      title={\r\n        UserId ? \"Manage Users | Edit User\" : \"Manage Users | Register User\"\r\n      }\r\n    >\r\n      {!loading ? (\r\n        <Box className={classes.mainBox}>\r\n          <Formik\r\n            enableReinitialize={true}\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              errors,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              touched,\r\n              values,\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Card>\r\n                  <CardHeader\r\n                    subheader={\r\n                      UserId\r\n                        ? \"Please change the below details to update user.\"\r\n                        : \"Please fill the below details to register user.\"\r\n                    }\r\n                    title={UserId ? \"Edit User\" : \"Register User\"}\r\n                    style={{ textAlign: \"center\" }}\r\n                    titleTypographyProps={{ variant: \"h3\", component: \"h3\" }}\r\n                  />\r\n                  <Divider />\r\n                  <Box p={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"First Name\"\r\n                          name=\"firstname\"\r\n                          value={values.firstname}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.firstname && errors.firstname)}\r\n                          helperText={touched.firstname && errors.firstname}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Last Name\"\r\n                          name=\"lastname\"\r\n                          value={values.lastname}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.lastname && errors.lastname)}\r\n                          helperText={touched.lastname && errors.lastname}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Email\"\r\n                          name=\"email\"\r\n                          type=\"email\"\r\n                          value={values.email}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.email && errors.email)}\r\n                          helperText={touched.email && errors.email}\r\n                        />\r\n                      </Grid>\r\n                      {!UserId && (\r\n                        <Grid item md={6} sm={6} xs={12}>\r\n                          <TextField\r\n                            fullWidth\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={values.password}\r\n                            variant=\"outlined\"\r\n                            inputProps={{ maxLength: 100 }}\r\n                            onBlur={handleBlur}\r\n                            onChange={handleChange}\r\n                            error={Boolean(touched.password && errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Phone Number\"\r\n                          name=\"phone\"\r\n                          value={values.phone}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 10 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.phone && errors.phone)}\r\n                          helperText={touched.phone && errors.phone}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Employee Code\"\r\n                          name=\"employeecode\"\r\n                          value={values.employeecode}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.employeecode && errors.employeecode\r\n                          )}\r\n                          helperText={\r\n                            touched.employeecode && errors.employeecode\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Designation\"\r\n                          name=\"designation\"\r\n                          value={values.designation}\r\n                          variant=\"outlined\"\r\n                          inputProps={{ maxLength: 100 }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.designation && errors.designation\r\n                          )}\r\n                          helperText={touched.designation && errors.designation}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          select\r\n                          fullWidth\r\n                          label=\"Select Role\"\r\n                          name=\"role\"\r\n                          value={values.role}\r\n                          variant=\"outlined\"\r\n                          disabled={\r\n                            editableUser &&\r\n                            editableUser.Role.RoleName.toLowerCase() ===\r\n                              \"admin\" &&\r\n                            editableUser._id === loggedInUser._id\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(touched.role && errors.role)}\r\n                          helperText={touched.role && errors.role}\r\n                        >\r\n                          <option key=\"-1\" value=\"\">\r\n                            - None -\r\n                          </option>\r\n                          {roles.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.RoleName}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item md={6} sm={6} xs={12}>\r\n                        <TextField\r\n                          select\r\n                          fullWidth\r\n                          label=\"Select Reporting Manager\"\r\n                          name=\"reportingmanager\"\r\n                          value={values.reportingmanager}\r\n                          variant=\"outlined\"\r\n                          disabled={\r\n                            editableUser &&\r\n                            editableUser.Role.RoleName.toLowerCase() ===\r\n                              \"admin\" &&\r\n                            editableUser._id === loggedInUser._id\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          SelectProps={{ native: true }}\r\n                          InputLabelProps={{ shrink: true }}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          error={Boolean(\r\n                            touched.reportingmanager && errors.reportingmanager\r\n                          )}\r\n                          helperText={\r\n                            touched.reportingmanager && errors.reportingmanager\r\n                          }\r\n                        >\r\n                          <option value=\"\">- None -</option>\r\n                          {reportingmanagers.map((option) => (\r\n                            <option key={option._id} value={option._id}>\r\n                              {option.Name}\r\n                            </option>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box display=\"flex\" justifyContent=\"center\" p={1}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      disabled={isSubmitting}\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                    >\r\n                      {isSubmitting\r\n                        ? \"Please wait...\"\r\n                        : UserId\r\n                        ? \"Update\"\r\n                        : \"Register\"}\r\n                    </Button>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      size=\"large\"\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      href={manageUserPath}\r\n                    >\r\n                      {UserId ? \"Cancel\" : \"Back\"}\r\n                    </Button>\r\n                  </Box>\r\n                </Card>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </DashboardPage>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n"]},"metadata":{},"sourceType":"module"}