{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\context\\\\SessionContext.tsx\";\nimport React, { Component } from \"react\";\nimport { withCookies } from \"react-cookie\";\nimport { PROJECT_PATHS } from \"../shared/constants\"; // Defined in interface so commented here.\n//export type UpdateSessionState = (user: ILoginUser) => void;\n// Define interface to pass in create context & Session class as state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// set initial value to pass in create context\nconst initialState = {\n  isAuthenticated: false,\n  user: undefined,\n  LoginUser: user => {},\n  LogoutUser: () => {},\n  UpdateProfilePicture: profilephoto => {}\n}; // Create context with default value\n\nconst SessionContext = /*#__PURE__*/React.createContext(initialState);\n\nclass Session extends Component {\n  // Define static member of class, which can be access by Session.USER_COOKIE_KEY.\n  constructor(props) {\n    super(props);\n    const loguser = this.props.cookies.get(Session.USER_COOKIE_KEY);\n    let isAuthenticated = false;\n\n    if (loguser) {\n      isAuthenticated = true;\n    }\n\n    this.state = {\n      isAuthenticated: isAuthenticated,\n      user: loguser,\n      LoginUser: currentuser => {\n        this.props.cookies.set(Session.USER_COOKIE_KEY, currentuser, {\n          path: \"/\"\n        });\n        this.setState({\n          isAuthenticated: true,\n          user: currentuser\n        });\n        let redirect;\n        redirect = PROJECT_PATHS.Manager.find(x => x.pagename === \"viewcandidates\");\n        window.location.href = redirect.path;\n      },\n      LogoutUser: () => {\n        const landingPage = PROJECT_PATHS.Auth.find(x => x.pagename === \"landing\");\n        this.props.cookies.remove(Session.USER_COOKIE_KEY, {\n          path: \"/\"\n        });\n        this.setState({\n          isAuthenticated: false,\n          user: undefined\n        });\n        window.location.href = landingPage.path;\n      },\n      UpdateProfilePicture: profilephoto => {\n        const currentuser = this.props.cookies.get(Session.USER_COOKIE_KEY);\n        currentuser.ProfilePhoto = profilephoto;\n        this.props.cookies.set(Session.USER_COOKIE_KEY, currentuser, {\n          path: \"/\"\n        });\n        this.setState({\n          user: currentuser\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Use withCookies() to give the app access to cookies. We call this function when exporting the component.\n// If using React Router, pass the cookies prop into your Route components that require them.\n\n\nSession.USER_COOKIE_KEY = \"dsr_user\";\nexport default SessionContext;\nexport const SessionProvider = withCookies(Session);\n_c = SessionProvider;\nexport const SessionConsumer = SessionContext.Consumer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/context/SessionContext.tsx"],"names":["React","Component","withCookies","PROJECT_PATHS","initialState","isAuthenticated","user","undefined","LoginUser","LogoutUser","UpdateProfilePicture","profilephoto","SessionContext","createContext","Session","constructor","props","loguser","cookies","get","USER_COOKIE_KEY","state","currentuser","set","path","setState","redirect","Manager","find","x","pagename","window","location","href","landingPage","Auth","remove","ProfilePhoto","render","children","SessionProvider","SessionConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withCookies, Cookies } from \"react-cookie\";\r\nimport ILoginUser from \"../classes/ILoginUser\";\r\nimport IPage from \"../classes/IPage\";\r\nimport { PROJECT_PATHS } from \"../shared/constants\";\r\n\r\n// Defined in interface so commented here.\r\n//export type UpdateSessionState = (user: ILoginUser) => void;\r\n\r\n// Define interface to pass in create context & Session class as state\r\ninterface ISessionState {\r\n  isAuthenticated: boolean;\r\n  user?: ILoginUser | undefined;\r\n  LoginUser: (user: ILoginUser) => void;\r\n  LogoutUser: () => void;\r\n  UpdateProfilePicture: (profilephoto: string) => void;\r\n}\r\n\r\n// Define interface to pass in Session class as Props\r\ninterface ISessionProps {\r\n  cookies: Cookies;\r\n  children?: React.ReactNode;\r\n}\r\n\r\n// set initial value to pass in create context\r\nconst initialState: ISessionState = {\r\n  isAuthenticated: false,\r\n  user: undefined,\r\n  LoginUser: (user: ILoginUser) => {},\r\n  LogoutUser: () => {},\r\n  UpdateProfilePicture: (profilephoto: string) => {},\r\n};\r\n\r\n// Create context with default value\r\nconst SessionContext = React.createContext<ISessionState>(initialState);\r\n\r\nclass Session extends Component<ISessionProps, ISessionState> {\r\n  // Define static member of class, which can be access by Session.USER_COOKIE_KEY.\r\n  private static USER_COOKIE_KEY: string = \"dsr_user\";\r\n\r\n  constructor(props: ISessionProps) {\r\n    super(props);\r\n    const loguser = this.props.cookies.get(Session.USER_COOKIE_KEY);\r\n    let isAuthenticated: boolean = false;\r\n\r\n    if (loguser) {\r\n      isAuthenticated = true;\r\n    }\r\n\r\n    this.state = {\r\n      isAuthenticated: isAuthenticated,\r\n      user: loguser,\r\n      LoginUser: (currentuser: ILoginUser) => {\r\n        this.props.cookies.set(Session.USER_COOKIE_KEY, currentuser, {\r\n          path: \"/\",\r\n        });\r\n        this.setState({ isAuthenticated: true, user: currentuser });\r\n        let redirect: IPage;\r\n        redirect = PROJECT_PATHS.Manager.find(\r\n          (x) => x.pagename === \"viewcandidates\"\r\n        ) as IPage;\r\n\r\n        window.location.href = redirect.path;\r\n      },\r\n      LogoutUser: () => {\r\n        const landingPage = PROJECT_PATHS.Auth.find(\r\n          (x) => x.pagename === \"landing\"\r\n        ) as IPage;\r\n        this.props.cookies.remove(Session.USER_COOKIE_KEY, { path: \"/\" });\r\n        this.setState({ isAuthenticated: false, user: undefined });\r\n        window.location.href = landingPage.path;\r\n      },\r\n      UpdateProfilePicture: (profilephoto: string) => {\r\n        const currentuser = this.props.cookies.get(Session.USER_COOKIE_KEY);\r\n        currentuser.ProfilePhoto = profilephoto;\r\n        this.props.cookies.set(Session.USER_COOKIE_KEY, currentuser, {\r\n          path: \"/\",\r\n        });\r\n        this.setState({ user: currentuser });\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SessionContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </SessionContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\n// Use withCookies() to give the app access to cookies. We call this function when exporting the component.\r\n// If using React Router, pass the cookies prop into your Route components that require them.\r\nexport default SessionContext;\r\nexport const SessionProvider = withCookies(Session);\r\nexport const SessionConsumer = SessionContext.Consumer;\r\n"]},"metadata":{},"sourceType":"module"}