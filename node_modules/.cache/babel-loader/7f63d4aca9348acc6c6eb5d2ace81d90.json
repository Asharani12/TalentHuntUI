{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\MyAccount\\\\MyProfile\\\\index.tsx\";\nimport { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport { getProfileRequest } from \"../../../services/MyAccount\";\nimport LeftProfile from \"./LeftProfile\";\nimport RightProfile from \"./RightProfile\";\nimport snackbarAlert from \"../../SnackbarAlert/\";\nimport Spinner from \"../../Spinner/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  UserId: '',\n  loading: true\n};\n\nclass MyProfile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    this.getMyProfile(this.context.user._id);\n  }\n\n  async getMyProfile(UserId) {\n    try {\n      if (UserId) {\n        const response = await getProfileRequest(UserId);\n\n        if (response) {\n          if (response.Status.ResponseCode == 200) {\n            this.setState({\n              UserId: this.context.user._id,\n              Profile: response.User,\n              loading: false\n            });\n          } else {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n          }\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  }\n\n  renderContent() {\n    if (!this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 4,\n          md: 4,\n          xs: 12,\n          children: this.state.Profile && /*#__PURE__*/_jsxDEV(LeftProfile, {\n            UserId: this.state.UserId,\n            Profile: this.state.Profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 8,\n          md: 8,\n          xs: 12,\n          children: this.state.Profile && /*#__PURE__*/_jsxDEV(RightProfile, {\n            Profile: this.state.Profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", this.renderContent()]\n    }, void 0, true);\n  }\n\n}\n\nMyProfile.contextType = SessionContext;\n;\nexport default MyProfile;","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/MyAccount/MyProfile/index.tsx"],"names":["Component","Grid","SessionContext","getProfileRequest","LeftProfile","RightProfile","snackbarAlert","Spinner","initialState","UserId","loading","MyProfile","constructor","props","state","componentDidMount","getMyProfile","context","user","_id","response","Status","ResponseCode","setState","Profile","User","error","renderContent","render","contextType"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport IProfile from \"../../../classes/IProfile\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport { getProfileRequest } from \"../../../services/MyAccount\";\nimport LeftProfile from \"./LeftProfile\";\nimport RightProfile from \"./RightProfile\";\nimport snackbarAlert from \"../../SnackbarAlert/\";\nimport Spinner from \"../../Spinner/\";\n\nexport interface IMyProfileStates {\n    UserId: string;\n    Profile?: IProfile;\n    loading: boolean;\n}\n\nconst initialState = {\n    UserId: '',\n    loading: true\n}\n\nclass MyProfile extends Component<{}, IMyProfileStates> {\n    static contextType = SessionContext;\n\n    constructor(props: any) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        this.getMyProfile(this.context.user._id);\n    }\n\n    async getMyProfile(UserId: string) {\n        try {\n            if (UserId) {\n                const response = await getProfileRequest(UserId);\n                if (response) {\n                    if (response.Status.ResponseCode == 200) {\n                        this.setState({\n                            UserId: this.context.user._id,\n                            Profile: response.User,\n                            loading:false\n                        });\n                    }\n                    else {\n                        snackbarAlert.error(\"Oops! Something Broke!\");\n                    }\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke!\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    renderContent() {\n        if (!this.state.loading) {\n            return (\n                <Grid\n                    container\n                    spacing={3}\n                >\n                    <Grid\n                        item\n                        lg={4}\n                        md={4}\n                        xs={12}\n                    >\n                        {this.state.Profile &&\n                            <LeftProfile UserId={this.state.UserId} Profile={this.state.Profile} />\n                        }\n                    </Grid>\n                    <Grid\n                        item\n                        lg={8}\n                        md={8}\n                        xs={12}\n                    >\n                        {this.state.Profile &&\n                            <RightProfile Profile={this.state.Profile} />\n                        }\n                    </Grid>\n                </Grid>\n            );\n        }\n\n        return (\n            <Spinner />\n        );\n    }\n\n    render() {\n        return <> {this.renderContent()}</>;\n    }\n};\n\nexport default MyProfile;"]},"metadata":{},"sourceType":"module"}