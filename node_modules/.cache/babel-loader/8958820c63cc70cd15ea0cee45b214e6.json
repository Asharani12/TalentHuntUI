{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\Auth\\\\ForgotPassword.tsx\";\nimport { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { Box, Button, Container, Link, TextField, Typography } from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport { sendResetPasswordLinkRequest } from \"../../services/Auth\";\nimport snackbarAlert from \"../SnackbarAlert/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ForgotPassword extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async (values, {\n      resetForm\n    }) => {\n      try {\n        var _PROJECT_PATHS$Auth$f;\n\n        const resetPasswordPath = (_PROJECT_PATHS$Auth$f = PROJECT_PATHS.Auth.find(x => x.pagename === 'resetpassword')) === null || _PROJECT_PATHS$Auth$f === void 0 ? void 0 : _PROJECT_PATHS$Auth$f.path.replace('/:id', '');\n        const resetPasswordUrl = window.location.protocol + '//' + window.location.hostname + resetPasswordPath;\n        const response = await sendResetPasswordLinkRequest(values.email, resetPasswordUrl);\n\n        if (response) {\n          if (response.Status.ResponseCode == 200) {\n            snackbarAlert.success(\"Please check your email to reset password!\");\n            resetForm();\n          } else if (response.Status.ResponseCode == 203) {\n            snackbarAlert.warning(\"Email is not registered yet!\");\n          } else {\n            snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n          }\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      } catch (error) {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    };\n\n    this.validationSchema = Yup.object().shape({\n      email: Yup.string().email('Must be a valid email!').max(100).required('Email is required!')\n    });\n  }\n\n  render() {\n    const login = PROJECT_PATHS.Auth.find(x => x.pagename === 'landing');\n    return /*#__PURE__*/_jsxDEV(MainPage, {\n      title: \"Forgot Password\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"center\",\n        padding: 2,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"maincontent-box\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mb: 3,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              className: \"boxtitle\",\n              variant: \"h2\",\n              children: \"Forgot Your Password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textSecondary\",\n              gutterBottom: true,\n              variant: \"body2\",\n              children: \"If you forgot your password, no worries: enter your email address and we'll send you a link to pick a new password.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              email: ''\n            },\n            validationSchema: this.validationSchema,\n            onSubmit: this.handleSubmit,\n            children: ({\n              errors,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              isSubmitting,\n              touched,\n              values\n            }) => /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Email\",\n                margin: \"normal\",\n                name: \"email\",\n                type: \"email\",\n                value: values.email,\n                variant: \"outlined\",\n                inputProps: {\n                  maxLength: 100\n                },\n                onBlur: handleBlur,\n                onChange: handleChange,\n                error: Boolean(touched.email && errors.email),\n                helperText: touched.email && errors.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                my: 2,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"primary\",\n                  disabled: isSubmitting,\n                  fullWidth: true,\n                  size: \"large\",\n                  type: \"submit\",\n                  variant: \"contained\",\n                  children: isSubmitting ? \"Please wait...\" : \"Send link\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                variant: \"body1\",\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  component: RouterLink,\n                  to: login ? login.path : '#',\n                  variant: \"h6\",\n                  children: \"BACK TO SIGN IN\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default ForgotPassword;","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/Auth/ForgotPassword.tsx"],"names":["Component","Link","RouterLink","Yup","Formik","Box","Button","Container","TextField","Typography","PROJECT_PATHS","MainPage","sendResetPasswordLinkRequest","snackbarAlert","ForgotPassword","constructor","props","handleSubmit","values","resetForm","resetPasswordPath","Auth","find","x","pagename","path","replace","resetPasswordUrl","window","location","protocol","hostname","response","email","Status","ResponseCode","success","warning","error","validationSchema","object","shape","string","max","required","render","login","errors","handleBlur","handleChange","isSubmitting","touched","maxLength","Boolean"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport { sendResetPasswordLinkRequest } from \"../../services/Auth\";\nimport snackbarAlert from \"../SnackbarAlert/\";\n\nexport interface IFormValues {\n  email: string;\n}\n\nclass ForgotPassword extends Component {\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n    try {\n      const resetPasswordPath = PROJECT_PATHS.Auth.find(x => x.pagename === 'resetpassword')?.path.replace('/:id', '');\n      const resetPasswordUrl = window.location.protocol + '//' + window.location.hostname + resetPasswordPath;\n\n      const response = await sendResetPasswordLinkRequest(values.email, resetPasswordUrl);\n      if (response) {\n        if (response.Status.ResponseCode == 200) {\n          snackbarAlert.success(\"Please check your email to reset password!\");\n          resetForm();\n        }\n        else if (response.Status.ResponseCode == 203) {\n          snackbarAlert.warning(\"Email is not registered yet!\");\n        }\n        else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      }\n      else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    }\n    catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email!').max(100).required('Email is required!')\n  });\n\n  render() {\n    const login = PROJECT_PATHS.Auth.find(x => x.pagename === 'landing');\n    return (\n      <MainPage title=\"Forgot Password\">\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" justifyContent=\"center\" padding={2}>\n          <Container className=\"maincontent-box\">\n            <Box mb={3}>\n              <Typography color=\"textPrimary\" className=\"boxtitle\" variant=\"h2\">Forgot Your Password?</Typography>\n              <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">If you forgot your password, no worries: enter your email address and we'll send you a link to pick a new password.</Typography>\n            </Box>\n            <Formik\n              initialValues={{\n                email: ''\n              }}\n              validationSchema={this.validationSchema}\n              onSubmit={this.handleSubmit}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    margin=\"normal\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      {(isSubmitting) ? \"Please wait...\" : \"Send link\"}\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\" >\n                    <Link component={RouterLink} to={login ? login.path : '#'} variant=\"h6\">\n                      BACK TO SIGN IN\n                  </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </Box>\n      </MainPage>\n    );\n  }\n};\n\nexport default ForgotPassword;"]},"metadata":{},"sourceType":"module"}