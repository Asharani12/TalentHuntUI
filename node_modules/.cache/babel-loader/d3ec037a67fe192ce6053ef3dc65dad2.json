{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\Auth\\\\Login.tsx\";\nimport { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { Box, Button, Container, Link, TextField, Typography } from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport { loginRequest } from \"../../services/Auth\";\nimport SessionContext from \"../../context/SessionContext\";\nimport snackbarAlert from \"../SnackbarAlert/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async values => {\n      try {\n        const response = await loginRequest(values.email, values.password);\n\n        if (response) {\n          if (response.Status.ResponseCode == 200) {\n            const User = response.User;\n            this.context.LoginUser(User);\n          } else if (response.Status.ResponseCode == 202) {\n            snackbarAlert.warning(\"You have entered wrong credentials!\");\n          } else if (response.Status.ResponseCode == 203) {\n            snackbarAlert.warning(\"Email is not registered yet!\");\n          }\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      } catch (error) {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    };\n\n    this.validationSchema = Yup.object().shape({\n      email: Yup.string().email(\"Must be a valid email!\").max(100).required(\"Email is required!\"),\n      password: Yup.string().max(100).required(\"Password is required!\")\n    });\n  }\n\n  render() {\n    const forgotPassword = PROJECT_PATHS.Auth.find(x => x.pagename === \"forgotpassword\");\n    return /*#__PURE__*/_jsxDEV(MainPage, {\n      title: \"Sign In\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"center\",\n        padding: 2,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"maincontent-box\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mb: 3,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              className: \"boxtitle\",\n              variant: \"h2\",\n              children: \"Sign in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textSecondary\",\n              gutterBottom: true,\n              variant: \"body2\",\n              children: \"Sign in to HRM platform\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              email: \"\",\n              password: \"\"\n            },\n            validationSchema: this.validationSchema,\n            onSubmit: this.handleSubmit,\n            children: ({\n              errors,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              isSubmitting,\n              touched,\n              values\n            }) => /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Email\",\n                margin: \"normal\",\n                name: \"email\",\n                type: \"email\",\n                value: values.email,\n                variant: \"outlined\",\n                inputProps: {\n                  maxLength: 100\n                } // required // This enables the browser messages\n                ,\n                onBlur: handleBlur,\n                onChange: handleChange,\n                error: Boolean(touched.email && errors.email),\n                helperText: touched.email && errors.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Password\",\n                margin: \"normal\",\n                name: \"password\",\n                type: \"password\",\n                value: values.password,\n                variant: \"outlined\",\n                inputProps: {\n                  maxLength: 100\n                },\n                onBlur: handleBlur,\n                onChange: handleChange,\n                error: Boolean(touched.password && errors.password),\n                helperText: touched.password && errors.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                my: 2,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"primary\",\n                  disabled: isSubmitting,\n                  fullWidth: true,\n                  size: \"large\",\n                  type: \"submit\",\n                  variant: \"contained\",\n                  children: isSubmitting ? \"Signing in...\" : \"Sign in now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                variant: \"body1\",\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  component: RouterLink,\n                  to: forgotPassword ? forgotPassword.path : \"#\",\n                  variant: \"h6\",\n                  children: \"FORGOT PASSWORD ?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nLogin.contextType = SessionContext;\nexport default Login;","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/Auth/Login.tsx"],"names":["Component","Link","RouterLink","Yup","Formik","Box","Button","Container","TextField","Typography","PROJECT_PATHS","MainPage","loginRequest","SessionContext","snackbarAlert","Login","constructor","props","handleSubmit","values","response","email","password","Status","ResponseCode","User","context","LoginUser","warning","error","validationSchema","object","shape","string","max","required","render","forgotPassword","Auth","find","x","pagename","errors","handleBlur","handleChange","isSubmitting","touched","maxLength","Boolean","path","contextType"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { PROJECT_PATHS } from \"../../shared/constants\";\nimport MainPage from \"../Page/MainPage\";\nimport ILoginUser from \"../../classes/ILoginUser\";\nimport { loginRequest } from \"../../services/Auth\";\nimport SessionContext from \"../../context/SessionContext\";\nimport snackbarAlert from \"../SnackbarAlert/\";\n\nexport interface IFormValues {\n  email: string;\n  password: string;\n}\n\nclass Login extends Component {\n  static contextType = SessionContext;\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  handleSubmit = async (values: IFormValues) => {\n    try {\n      const response = await loginRequest(values.email, values.password);\n      if (response) {\n        if (response.Status.ResponseCode == 200) {\n          const User: ILoginUser = response.User;\n          this.context.LoginUser(User);\n        } else if (response.Status.ResponseCode == 202) {\n          snackbarAlert.warning(\"You have entered wrong credentials!\");\n        } else if (response.Status.ResponseCode == 203) {\n          snackbarAlert.warning(\"Email is not registered yet!\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Must be a valid email!\")\n      .max(100)\n      .required(\"Email is required!\"),\n    password: Yup.string().max(100).required(\"Password is required!\"),\n  });\n\n  render() {\n    const forgotPassword = PROJECT_PATHS.Auth.find(\n      (x) => x.pagename === \"forgotpassword\"\n    );\n    return (\n      <MainPage title=\"Sign In\">\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          height=\"100%\"\n          justifyContent=\"center\"\n          padding={2}\n        >\n          <Container className=\"maincontent-box\">\n            <Box mb={3}>\n              <Typography color=\"textPrimary\" className=\"boxtitle\" variant=\"h2\">\n                Sign in\n              </Typography>\n              <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n                Sign in to HRM platform\n              </Typography>\n            </Box>\n            <Formik\n              initialValues={{\n                email: \"\",\n                password: \"\",\n              }}\n              validationSchema={this.validationSchema}\n              onSubmit={this.handleSubmit}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                touched,\n                values,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    margin=\"normal\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    // required // This enables the browser messages\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Password\"\n                    margin=\"normal\"\n                    name=\"password\"\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                    inputProps={{ maxLength: 100 }}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    error={Boolean(touched.password && errors.password)}\n                    helperText={touched.password && errors.password}\n                  />\n                  <Box my={2}>\n                    <Button\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      fullWidth\n                      size=\"large\"\n                      type=\"submit\"\n                      variant=\"contained\"\n                    >\n                      {isSubmitting ? \"Signing in...\" : \"Sign in now\"}\n                    </Button>\n                  </Box>\n                  <Typography color=\"textSecondary\" variant=\"body1\">\n                    <Link\n                      component={RouterLink}\n                      to={forgotPassword ? forgotPassword.path : \"#\"}\n                      variant=\"h6\"\n                    >\n                      FORGOT PASSWORD ?\n                    </Link>\n                  </Typography>\n                </form>\n              )}\n            </Formik>\n          </Container>\n        </Box>\n      </MainPage>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}