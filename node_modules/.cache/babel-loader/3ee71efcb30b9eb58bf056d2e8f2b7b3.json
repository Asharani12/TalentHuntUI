{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\SnackbarAlert\\\\index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Slide from '@material-ui/core/Slide';\nimport Alert from \"@material-ui/lab/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SnackbarAlertContainer extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"snack-bar-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass SnackbarAlertContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: this.props.isOpen,\n      severity: this.props.severity,\n      message: this.props.message\n    };\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  Transition(props) {\n    return /*#__PURE__*/_jsxDEV(Slide, { ...props,\n      direction: \"left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  }\n\n  handleClose() {\n    this.setState({\n      isOpen: false\n    });\n    const snackbarContainer = document.getElementById('snack-bar-container');\n    ReactDOM.unmountComponentAtNode(snackbarContainer);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: this.state.isOpen,\n      autoHideDuration: 6000,\n      onClose: this.handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      TransitionComponent: this.Transition,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"filled\",\n        severity: this.state.severity,\n        onClose: this.handleClose,\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, this.Transition ? this.Transition.name : '', false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst snackbarAlert = {\n  success(message) {\n    this.ShowAlert(message, 'success');\n  },\n\n  warning(message) {\n    this.ShowAlert(message, 'warning');\n  },\n\n  info(message) {\n    this.ShowAlert(message, 'info');\n  },\n\n  error(message) {\n    this.ShowAlert(message, 'error');\n  },\n\n  ShowAlert: (message, severity) => {\n    const snackbarContainer = document.getElementById('snack-bar-container');\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(SnackbarAlertContent, {\n      isOpen: true,\n      severity: severity,\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), snackbarContainer);\n  }\n};\nexport default snackbarAlert;\nexport { SnackbarAlertContainer };","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/SnackbarAlert/index.tsx"],"names":["React","ReactDOM","Snackbar","Slide","Alert","SnackbarAlertContainer","Component","render","SnackbarAlertContent","constructor","props","state","isOpen","severity","message","handleClose","bind","Transition","setState","snackbarContainer","document","getElementById","unmountComponentAtNode","vertical","horizontal","name","snackbarAlert","success","ShowAlert","warning","info","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Slide, { SlideProps } from '@material-ui/core/Slide';\nimport Alert from \"@material-ui/lab/Alert\";\n\nexport type Color = 'success' | 'info' | 'warning' | 'error';\ntype TransitionProps = Omit<SlideProps, 'direction'>;\n\ninterface ISnackbarAlertProps {\n    isOpen: boolean;\n    severity: Color | undefined;\n    message: string;\n}\n\ninterface ISnackbarAlertState {\n    isOpen: boolean,\n    severity: Color | undefined,\n    message: string\n}\n\nclass SnackbarAlertContainer extends React.Component {\n    render() {\n        return (\n            <div id=\"snack-bar-container\"></div>\n        );\n    };\n}\n\nclass SnackbarAlertContent extends React.Component<ISnackbarAlertProps, ISnackbarAlertState> {\n    constructor(props: ISnackbarAlertProps) {\n        super(props);\n        this.state = {\n            isOpen: this.props.isOpen,\n            severity: this.props.severity,\n            message: this.props.message\n        };\n\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    Transition(props: TransitionProps) {\n        return <Slide {...props} direction=\"left\" />;\n    }\n\n    handleClose() {\n        this.setState({ isOpen: false });\n        const snackbarContainer = document.getElementById('snack-bar-container') as HTMLDivElement;\n        ReactDOM.unmountComponentAtNode(snackbarContainer);\n    }\n\n    render() {\n        return (\n            <Snackbar\n                open={this.state.isOpen}\n                autoHideDuration={6000}\n                onClose={this.handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                TransitionComponent={this.Transition}\n                key={this.Transition ? this.Transition.name : ''}\n            >\n                <Alert variant=\"filled\" severity={this.state.severity} onClose={this.handleClose}>\n                    {this.state.message}\n                </Alert>\n            </Snackbar>\n        );\n    }\n}\n\nconst snackbarAlert = {\n    success(message: string) {\n        this.ShowAlert(message, 'success')\n    },\n    warning(message: string) {\n        this.ShowAlert(message, 'warning')\n    },\n    info(message: string) {\n        this.ShowAlert(message, 'info')\n    },\n    error(message: string) {\n        this.ShowAlert(message, 'error')\n    },\n    ShowAlert: (message: string, severity: Color) => {\n        const snackbarContainer = document.getElementById('snack-bar-container') as HTMLDivElement;\n        ReactDOM.render(\n            <SnackbarAlertContent isOpen={true} severity={severity} message={message} />,\n            snackbarContainer\n        );\n    }\n}\n\nexport default snackbarAlert;\nexport { SnackbarAlertContainer };"]},"metadata":{},"sourceType":"module"}