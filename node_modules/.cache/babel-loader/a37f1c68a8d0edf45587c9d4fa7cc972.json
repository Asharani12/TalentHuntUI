{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\Admin\\\\Role\\\\AddRole.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { Box, Button, Card, CardHeader, Divider, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { getRoleByIdRequest, insertRoleRequest, updateRoleRequest } from \"../../../services/Admin\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  mainBox: {\n    maxWidth: 800,\n    margin: '16px auto 0'\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst AddRole = props => {\n  _s();\n\n  var _PROJECT_PATHS$Admin$;\n\n  const classes = useStyles();\n  const context = useContext(SessionContext);\n  const RoleId = props.match.params.id;\n  const manageRole = (_PROJECT_PATHS$Admin$ = PROJECT_PATHS.Admin.find(x => x.pagename === 'viewroles')) === null || _PROJECT_PATHS$Admin$ === void 0 ? void 0 : _PROJECT_PATHS$Admin$.path;\n  const [loading, setLoading] = useState(true);\n  const [initialValues, setInitialValues] = useState({\n    rolename: ''\n  });\n\n  const getRoleById = async RoleId => {\n    try {\n      const response = await getRoleByIdRequest(RoleId);\n\n      if (response && response.Status.ResponseCode == 200) {\n        const Role = response.Role;\n        setInitialValues({\n          rolename: Role.RoleName\n        });\n        setLoading(false);\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke!\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  useEffect(() => {\n    (async function execPreLoadFunctions() {\n      if (RoleId) {\n        await getRoleById(RoleId);\n      } else {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const handleSubmit = async (values, {\n    resetForm\n  }) => {\n    try {\n      var _context$user;\n\n      const loggedinUserId = (_context$user = context.user) === null || _context$user === void 0 ? void 0 : _context$user._id;\n\n      if (RoleId) {\n        const response = await updateRoleRequest(RoleId, values.rolename, loggedinUserId);\n\n        if (response && response.Status.ResponseCode == 200) {\n          props.history.push(manageRole);\n        } else if (response.Status.ResponseCode == 206) {\n          snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      } else {\n        const response = await insertRoleRequest(values.rolename, loggedinUserId);\n\n        if (response && response.Status.ResponseCode == 200) {\n          snackbarAlert.success(\"Role added successfully!\");\n          resetForm();\n        } else if (response.Status.ResponseCode == 206) {\n          snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    rolename: Yup.string().min(2, 'Role name should be minimum 2 characters!').max(100, 'Role name should be maximum 100 characters!').required('Role name is required!')\n  });\n  return /*#__PURE__*/_jsxDEV(DashboardPage, {\n    title: RoleId ? \"Manage Roles | Edit Role\" : \"Manage Roles | Add Role\",\n    children: !loading ? /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.mainBox,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        enableReinitialize: true,\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: handleSubmit,\n        children: ({\n          errors,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          touched,\n          values\n        }) => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              subheader: RoleId ? \"Please change the below details to update role.\" : \"Please fill the below details to add new role.\",\n              title: RoleId ? \"Edit Role\" : \"Add Role\",\n              style: {\n                textAlign: \"center\"\n              },\n              titleTypographyProps: {\n                variant: 'h3',\n                component: 'h3'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              p: 3,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 12,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Role Name\",\n                    name: \"rolename\",\n                    value: values.rolename,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    error: Boolean(touched.rolename && errors.rolename),\n                    helperText: touched.rolename && errors.rolename\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              justifyContent: \"center\",\n              p: 1,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                disabled: isSubmitting,\n                size: \"large\",\n                type: \"submit\",\n                variant: \"contained\",\n                className: classes.button,\n                children: isSubmitting ? \"Please wait...\" : RoleId ? \"Update\" : \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"secondary\",\n                size: \"large\",\n                variant: \"contained\",\n                className: classes.button,\n                href: manageRole,\n                children: RoleId ? 'Cancel' : 'Back'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddRole, \"5nouAl17u3IbPkiMwGsBlB4nPnc=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddRole;\nexport default AddRole;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddRole\");","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/Admin/Role/AddRole.tsx"],"names":["useState","useEffect","useContext","Box","Button","Card","CardHeader","Divider","Grid","TextField","makeStyles","Yup","Formik","getRoleByIdRequest","insertRoleRequest","updateRoleRequest","PROJECT_PATHS","DashboardPage","SessionContext","snackbarAlert","Spinner","useStyles","theme","mainBox","maxWidth","margin","button","spacing","AddRole","props","classes","context","RoleId","match","params","id","manageRole","Admin","find","x","pagename","path","loading","setLoading","initialValues","setInitialValues","rolename","getRoleById","response","Status","ResponseCode","Role","RoleName","error","execPreLoadFunctions","handleSubmit","values","resetForm","loggedinUserId","user","_id","history","push","warning","success","validationSchema","object","shape","string","min","max","required","errors","handleBlur","handleChange","isSubmitting","touched","textAlign","variant","component","maxLength","Boolean"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SACIC,GADJ,EAEIC,MAFJ,EAGIC,IAHJ,EAIIC,UAJJ,EAKIC,OALJ,EAMIC,IANJ,EAOIC,SAPJ,QAQO,mBARP;AASA,SAASC,UAAT,QAAkC,0BAAlC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SACIC,kBADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,QAIO,yBAJP;AAMA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,SAAS,GAAGX,UAAU,CAAEY,KAAD,KAAmB;AAC5CC,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAE,GADL;AAELC,IAAAA,MAAM,EAAE;AAFH,GADmC;AAK5CC,EAAAA,MAAM,EAAE;AACJD,IAAAA,MAAM,EAAEH,KAAK,CAACK,OAAN,CAAc,CAAd;AADJ;AALoC,CAAnB,CAAD,CAA5B;;AAcA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAAA;;AAAA;;AAC5B,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAMU,OAAO,GAAG7B,UAAU,CAACgB,cAAD,CAA1B;AACA,QAAMc,MAAM,GAAGH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBC,EAAlC;AACA,QAAMC,UAAU,4BAAGpB,aAAa,CAACqB,KAAd,CAAoBC,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,WAA7C,CAAH,0DAAG,sBAA2DC,IAA9E;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB3C,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAAC4C,aAAD,EAAgBC,gBAAhB,IAAoC7C,QAAQ,CAAC;AAC/C8C,IAAAA,QAAQ,EAAE;AADqC,GAAD,CAAlD;;AAKA,QAAMC,WAAW,GAAG,MAAOf,MAAP,IAA0B;AAC1C,QAAI;AACA,YAAMgB,QAAQ,GAAG,MAAMnC,kBAAkB,CAACmB,MAAD,CAAzC;;AACA,UAAIgB,QAAQ,IAAIA,QAAQ,CAACC,MAAT,CAAgBC,YAAhB,IAAgC,GAAhD,EAAqD;AACjD,cAAMC,IAAW,GAAGH,QAAQ,CAACG,IAA7B;AACAN,QAAAA,gBAAgB,CAAC;AAAEC,UAAAA,QAAQ,EAAEK,IAAI,CAACC;AAAjB,SAAD,CAAhB;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAJD,MAKK;AACDxB,QAAAA,aAAa,CAACkC,KAAd,CAAoB,wBAApB;AACH;AACJ,KAVD,CAWA,OAAOA,KAAP,EAAc;AACVlC,MAAAA,aAAa,CAACkC,KAAd,CAAoB,wBAApB;AACH;AACJ,GAfD;;AAiBApD,EAAAA,SAAS,CAAC,MAAM;AACX,oBAAeqD,oBAAf,GAAsC;AACnC,UAAItB,MAAJ,EAAY;AACR,cAAMe,WAAW,CAACf,MAAD,CAAjB;AACH,OAFD,MAGK;AACDW,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAPA,GAAD;AAQH,GATQ,EASN,EATM,CAAT;;AAWA,QAAMY,YAAY,GAAG,OAAOC,MAAP,EAA4B;AAAEC,IAAAA;AAAF,GAA5B,KAAmD;AACpE,QAAI;AAAA;;AACA,YAAMC,cAAc,oBAAG3B,OAAO,CAAC4B,IAAX,kDAAG,cAAcC,GAArC;;AACA,UAAI5B,MAAJ,EAAY;AACR,cAAMgB,QAAQ,GAAG,MAAMjC,iBAAiB,CAACiB,MAAD,EAASwB,MAAM,CAACV,QAAhB,EAA0BY,cAA1B,CAAxC;;AACA,YAAIV,QAAQ,IAAIA,QAAQ,CAACC,MAAT,CAAgBC,YAAhB,IAAgC,GAAhD,EAAqD;AACjDrB,UAAAA,KAAK,CAACgC,OAAN,CAAcC,IAAd,CAAmB1B,UAAnB;AACH,SAFD,MAGK,IAAIY,QAAQ,CAACC,MAAT,CAAgBC,YAAhB,IAAgC,GAApC,EAAyC;AAC1C/B,UAAAA,aAAa,CAAC4C,OAAd,CAAsB,oDAAtB;AACH,SAFI,MAGA;AACD5C,UAAAA,aAAa,CAACkC,KAAd,CAAoB,0CAApB;AACH;AACJ,OAXD,MAYK;AACD,cAAML,QAAQ,GAAG,MAAMlC,iBAAiB,CAAC0C,MAAM,CAACV,QAAR,EAAkBY,cAAlB,CAAxC;;AACA,YAAIV,QAAQ,IAAIA,QAAQ,CAACC,MAAT,CAAgBC,YAAhB,IAAgC,GAAhD,EAAqD;AACjD/B,UAAAA,aAAa,CAAC6C,OAAd,CAAsB,0BAAtB;AACAP,UAAAA,SAAS;AACZ,SAHD,MAIK,IAAIT,QAAQ,CAACC,MAAT,CAAgBC,YAAhB,IAAgC,GAApC,EAAyC;AAC1C/B,UAAAA,aAAa,CAAC4C,OAAd,CAAsB,oDAAtB;AACH,SAFI,MAGA;AACD5C,UAAAA,aAAa,CAACkC,KAAd,CAAoB,0CAApB;AACH;AACJ;AACJ,KA3BD,CA4BA,OAAOA,KAAP,EAAc;AACVlC,MAAAA,aAAa,CAACkC,KAAd,CAAoB,wBAApB;AACH;AACJ,GAhCD;;AAkCA,QAAMY,gBAAgB,GAAGtD,GAAG,CAACuD,MAAJ,GAAaC,KAAb,CAAmB;AACxCrB,IAAAA,QAAQ,EAAEnC,GAAG,CAACyD,MAAJ,GACLC,GADK,CACD,CADC,EACE,2CADF,EAELC,GAFK,CAED,GAFC,EAEI,6CAFJ,EAGLC,QAHK,CAGI,wBAHJ;AAD8B,GAAnB,CAAzB;AAQA,sBACI,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEvC,MAAM,GAAG,0BAAH,GAAgC,yBAA5D;AAAA,cACM,CAACU,OAAF,gBACG,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEZ,OAAO,CAACP,OAAxB;AAAA,6BACI,QAAC,MAAD;AACI,QAAA,kBAAkB,EAAE,IADxB;AAEI,QAAA,aAAa,EAAEqB,aAFnB;AAGI,QAAA,gBAAgB,EAAEqB,gBAHtB;AAII,QAAA,QAAQ,EAAEV,YAJd;AAAA,kBAMK,CAAC;AACEiB,UAAAA,MADF;AAEEC,UAAAA,UAFF;AAGEC,UAAAA,YAHF;AAIEnB,UAAAA,YAJF;AAKEoB,UAAAA,YALF;AAMEC,UAAAA,OANF;AAOEpB,UAAAA;AAPF,SAAD,kBASG;AAAM,UAAA,QAAQ,EAAED,YAAhB;AAAA,iCACI,QAAC,IAAD;AAAA,oCACI,QAAC,UAAD;AACI,cAAA,SAAS,EAAEvB,MAAM,GAAG,iDAAH,GAAuD,gDAD5E;AAEI,cAAA,KAAK,EAAEA,MAAM,GAAG,WAAH,GAAiB,UAFlC;AAGI,cAAA,KAAK,EAAE;AAAE6C,gBAAAA,SAAS,EAAE;AAAb,eAHX;AAII,cAAA,oBAAoB,EAAE;AAAEC,gBAAAA,OAAO,EAAE,IAAX;AAAiBC,gBAAAA,SAAS,EAAE;AAA5B;AAJ1B;AAAA;AAAA;AAAA;AAAA,oBADJ,eAOI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAQI,QAAC,GAAD;AAAK,cAAA,CAAC,EAAE,CAAR;AAAA,qCACI,QAAC,IAAD;AAAM,gBAAA,SAAS,MAAf;AAAgB,gBAAA,OAAO,EAAE,CAAzB;AAAA,uCACI,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAW,kBAAA,EAAE,EAAE,EAAf;AAAmB,kBAAA,EAAE,EAAE,EAAvB;AAAA,yCACI,QAAC,SAAD;AACI,oBAAA,SAAS,MADb;AAEI,oBAAA,KAAK,EAAC,WAFV;AAGI,oBAAA,IAAI,EAAC,UAHT;AAII,oBAAA,KAAK,EAAEvB,MAAM,CAACV,QAJlB;AAKI,oBAAA,OAAO,EAAC,UALZ;AAMI,oBAAA,UAAU,EAAE;AAAEkC,sBAAAA,SAAS,EAAE;AAAb,qBANhB;AAOI,oBAAA,QAAQ,EAAEN,YAPd;AAQI,oBAAA,MAAM,EAAED,UARZ;AASI,oBAAA,KAAK,EAAEQ,OAAO,CAACL,OAAO,CAAC9B,QAAR,IAAoB0B,MAAM,CAAC1B,QAA5B,CATlB;AAUI,oBAAA,UAAU,EAAE8B,OAAO,CAAC9B,QAAR,IAAoB0B,MAAM,CAAC1B;AAV3C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBARJ,eA2BI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBA3BJ,eA4BI,QAAC,GAAD;AACI,cAAA,OAAO,EAAC,MADZ;AAEI,cAAA,cAAc,EAAC,QAFnB;AAGI,cAAA,CAAC,EAAE,CAHP;AAAA,sCAKI,QAAC,MAAD;AACI,gBAAA,KAAK,EAAC,SADV;AAEI,gBAAA,QAAQ,EAAE6B,YAFd;AAGI,gBAAA,IAAI,EAAC,OAHT;AAII,gBAAA,IAAI,EAAC,QAJT;AAKI,gBAAA,OAAO,EAAC,WALZ;AAMI,gBAAA,SAAS,EAAE7C,OAAO,CAACJ,MANvB;AAAA,0BAQMiD,YAAD,GAAiB,gBAAjB,GAAqC3C,MAAM,GAAG,QAAH,GAAc;AAR9D;AAAA;AAAA;AAAA;AAAA,sBALJ,eAeI,QAAC,MAAD;AACI,gBAAA,KAAK,EAAC,WADV;AAEI,gBAAA,IAAI,EAAC,OAFT;AAGI,gBAAA,OAAO,EAAC,WAHZ;AAII,gBAAA,SAAS,EAAEF,OAAO,CAACJ,MAJvB;AAKI,gBAAA,IAAI,EAAEU,UALV;AAAA,0BAOKJ,MAAM,GAAG,QAAH,GAAc;AAPzB;AAAA;AAAA;AAAA;AAAA,sBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAfR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADH,gBA6EG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AA9ER;AAAA;AAAA;AAAA;AAAA,UADJ;AAmFH,CArKD;;GAAMJ,O;UACcP,S;;;KADdO,O;AAuKN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n    getRoleByIdRequest,\n    insertRoleRequest,\n    updateRoleRequest\n} from \"../../../services/Admin\";\nimport IRole from \"../../../classes/IRole\";\nimport { PROJECT_PATHS } from \"../../../shared/constants\";\nimport DashboardPage from \"../../Page/DashboardPage\";\nimport SessionContext from \"../../../context/SessionContext\";\nimport snackbarAlert from \"../../SnackbarAlert\";\nimport Spinner from \"../../Spinner\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    mainBox: {\n        maxWidth: 800,\n        margin: '16px auto 0'\n    },\n    button: {\n        margin: theme.spacing(1),\n    }\n}));\n\nexport interface IFormValues {\n    rolename: string;\n}\n\nconst AddRole = (props: any) => {\n    const classes = useStyles();\n    const context = useContext(SessionContext);\n    const RoleId = props.match.params.id;\n    const manageRole = PROJECT_PATHS.Admin.find(x => x.pagename === 'viewroles')?.path as string;\n\n    const [loading, setLoading] = useState(true);\n    const [initialValues, setInitialValues] = useState({\n        rolename: ''\n    } as IFormValues);\n\n\n    const getRoleById = async (RoleId: string) => {\n        try {\n            const response = await getRoleByIdRequest(RoleId);\n            if (response && response.Status.ResponseCode == 200) {\n                const Role: IRole = response.Role;\n                setInitialValues({ rolename: Role.RoleName });\n                setLoading(false);\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke!\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    }\n\n    useEffect(() => {\n        (async function execPreLoadFunctions() {\n            if (RoleId) {\n                await getRoleById(RoleId);\n            }\n            else {\n                setLoading(false);\n            }\n        }());\n    }, []);\n\n    const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n        try {\n            const loggedinUserId = context.user?._id as string;\n            if (RoleId) {\n                const response = await updateRoleRequest(RoleId, values.rolename, loggedinUserId);\n                if (response && response.Status.ResponseCode == 200) {\n                    props.history.push(manageRole)\n                }\n                else if (response.Status.ResponseCode == 206) {\n                    snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n            else {\n                const response = await insertRoleRequest(values.rolename, loggedinUserId);\n                if (response && response.Status.ResponseCode == 200) {\n                    snackbarAlert.success(\"Role added successfully!\");\n                    resetForm();\n                }\n                else if (response.Status.ResponseCode == 206) {\n                    snackbarAlert.warning(\"Role name already exists! Please enter unique one.\");\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    };\n\n    const validationSchema = Yup.object().shape({\n        rolename: Yup.string()\n            .min(2, 'Role name should be minimum 2 characters!')\n            .max(100, 'Role name should be maximum 100 characters!')\n            .required('Role name is required!')\n    });\n\n\n    return (\n        <DashboardPage title={RoleId ? \"Manage Roles | Edit Role\" : \"Manage Roles | Add Role\"}>\n            {(!loading) ?\n                <Box className={classes.mainBox}>\n                    <Formik\n                        enableReinitialize={true}\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={handleSubmit}\n                    >\n                        {({\n                            errors,\n                            handleBlur,\n                            handleChange,\n                            handleSubmit,\n                            isSubmitting,\n                            touched,\n                            values\n                        }) => (\n                            <form onSubmit={handleSubmit}>\n                                <Card>\n                                    <CardHeader\n                                        subheader={RoleId ? \"Please change the below details to update role.\" : \"Please fill the below details to add new role.\"}\n                                        title={RoleId ? \"Edit Role\" : \"Add Role\"}\n                                        style={{ textAlign: \"center\" }}\n                                        titleTypographyProps={{ variant: 'h3', component: 'h3' }}\n                                    />\n                                    <Divider />\n                                    <Box p={3}>\n                                        <Grid container spacing={2}>\n                                            <Grid item md={12} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    label=\"Role Name\"\n                                                    name=\"rolename\"\n                                                    value={values.rolename}\n                                                    variant=\"outlined\"\n                                                    inputProps={{ maxLength: 100 }}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={Boolean(touched.rolename && errors.rolename)}\n                                                    helperText={touched.rolename && errors.rolename}\n\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                    <Divider />\n                                    <Box\n                                        display=\"flex\"\n                                        justifyContent=\"center\"\n                                        p={1}\n                                    >\n                                        <Button\n                                            color=\"primary\"\n                                            disabled={isSubmitting}\n                                            size=\"large\"\n                                            type=\"submit\"\n                                            variant=\"contained\"\n                                            className={classes.button}\n                                        >\n                                            {(isSubmitting) ? \"Please wait...\" : (RoleId ? \"Update\" : \"Save\")}\n                                        </Button>\n                                        <Button\n                                            color=\"secondary\"\n                                            size=\"large\"\n                                            variant=\"contained\"\n                                            className={classes.button}\n                                            href={manageRole}\n                                        >\n                                            {RoleId ? 'Cancel' : 'Back'}\n                                        </Button>\n                                    </Box>\n                                </Card>\n                            </form>\n                        )}\n                    </Formik>\n                </Box>\n                :\n                <Spinner />\n            }\n        </DashboardPage>\n    );\n};\n\nexport default AddRole;"]},"metadata":{},"sourceType":"module"}