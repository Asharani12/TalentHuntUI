{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fs8-c\\\\OneDrive\\\\Desktop\\\\Cloudegic\\\\projfrontend1\\\\src\\\\components\\\\MyAccount\\\\ChangePassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { Box, Button, Card, CardContent, CardHeader, Divider, Grid, TextField } from \"@material-ui/core\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { changePasswordRequest } from \"../../services/MyAccount\";\nimport snackbarAlert from \"../SnackbarAlert/\";\nimport SessionContext from \"../../context/SessionContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChangePassword = () => {\n  _s();\n\n  const context = useContext(SessionContext);\n\n  const handleSubmit = async (values, {\n    resetForm\n  }) => {\n    try {\n      if (context.user) {\n        const response = await changePasswordRequest(context.user._id, values.oldpassword, values.newpassword);\n\n        if (response) {\n          if (response.Status.ResponseCode == 200) {\n            snackbarAlert.success(\"Password updated successfully! Please sign in with new password, when you come back.\");\n            resetForm();\n          } else if (response.Status.ResponseCode == 207) {\n            snackbarAlert.warning(\"Old password is wrong! Please enter correct one.\");\n          } else {\n            snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n          }\n        } else {\n          snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n        }\n      } else {\n        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n      }\n    } catch (error) {\n      snackbarAlert.error(\"Oops! Something Broke!\");\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    oldpassword: Yup.string().max(100).required('Old password is required!'),\n    newpassword: Yup.string().min(7, 'Password length should be minimum 7 characters!').max(100, 'Password should be maximum 100 characters!').required('New Password is required!').test('passwords-match', 'New password must be different from old password!', function (value) {\n      return this.parent.oldpassword !== value;\n    }),\n    confirmpassword: Yup.string().required(\"Confirm passsword is required!\").oneOf([Yup.ref('newpassword')], 'Passwords must match!')\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        oldpassword: '',\n        newpassword: '',\n        confirmpassword: ''\n      },\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: ({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 12,\n          md: 12,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              subheader: \"Please fill below details to change your password\",\n              title: \"Change Password\",\n              style: {\n                textAlign: \"center\"\n              },\n              titleTypographyProps: {\n                variant: 'h3',\n                component: 'h3'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 4,\n                  sm: 12,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Old Password\",\n                    margin: \"normal\",\n                    name: \"oldpassword\",\n                    type: \"password\",\n                    value: values.oldpassword,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onBlur: handleBlur,\n                    onChange: handleChange,\n                    error: Boolean(touched.oldpassword && errors.oldpassword),\n                    helperText: touched.oldpassword && errors.oldpassword\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 4,\n                  sm: 12,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"New Password\",\n                    margin: \"normal\",\n                    name: \"newpassword\",\n                    type: \"password\",\n                    value: values.newpassword,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onBlur: handleBlur,\n                    onChange: handleChange,\n                    error: Boolean(touched.newpassword && errors.newpassword),\n                    helperText: touched.newpassword && errors.newpassword\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 4,\n                  sm: 12,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    fullWidth: true,\n                    label: \"Confirm Password\",\n                    margin: \"normal\",\n                    name: \"confirmpassword\",\n                    type: \"password\",\n                    value: values.confirmpassword,\n                    variant: \"outlined\",\n                    inputProps: {\n                      maxLength: 100\n                    },\n                    onBlur: handleBlur,\n                    onChange: handleChange,\n                    error: Boolean(touched.confirmpassword && errors.confirmpassword),\n                    helperText: touched.confirmpassword && errors.confirmpassword\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              p: 2,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                disabled: isSubmitting,\n                size: \"large\",\n                type: \"submit\",\n                variant: \"contained\",\n                children: isSubmitting ? \"Please wait...\" : \"Change Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChangePassword, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["C:/Users/fs8-c/OneDrive/Desktop/Cloudegic/projfrontend1/src/components/MyAccount/ChangePassword.tsx"],"names":["useContext","Box","Button","Card","CardContent","CardHeader","Divider","Grid","TextField","Yup","Formik","changePasswordRequest","snackbarAlert","SessionContext","ChangePassword","context","handleSubmit","values","resetForm","user","response","_id","oldpassword","newpassword","Status","ResponseCode","success","warning","error","validationSchema","object","shape","string","max","required","min","test","value","parent","confirmpassword","oneOf","ref","errors","handleBlur","handleChange","isSubmitting","touched","textAlign","variant","component","maxLength","Boolean"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Container,\n    Divider,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { changePasswordRequest } from \"../../services/MyAccount\";\nimport snackbarAlert from \"../SnackbarAlert/\";\nimport SessionContext from \"../../context/SessionContext\";\n\nexport interface IFormValues {\n    oldpassword: string;\n    newpassword: string;\n    confirmpassword: string;\n}\n\nconst ChangePassword = () => {\n    const context = useContext(SessionContext);\n\n    const handleSubmit = async (values: IFormValues, { resetForm }: any) => {\n        try {\n            if (context.user) {\n                const response = await changePasswordRequest(context.user._id, values.oldpassword, values.newpassword);\n                if (response) {\n                    if (response.Status.ResponseCode == 200) {\n                        snackbarAlert.success(\"Password updated successfully! Please sign in with new password, when you come back.\");\n                        resetForm();\n                    }\n                    else if (response.Status.ResponseCode == 207) {\n                        snackbarAlert.warning(\"Old password is wrong! Please enter correct one.\");\n                    }\n                    else {\n                        snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                    }\n                }\n                else {\n                    snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n                }\n            }\n            else {\n                snackbarAlert.error(\"Oops! Something Broke! Please try again.\");\n            }\n        }\n        catch (error) {\n            snackbarAlert.error(\"Oops! Something Broke!\");\n        }\n    };\n\n    const validationSchema = Yup.object().shape({\n        oldpassword: Yup.string().max(100).required('Old password is required!'),\n        newpassword: Yup.string()\n            .min(7, 'Password length should be minimum 7 characters!')\n            .max(100, 'Password should be maximum 100 characters!')\n            .required('New Password is required!')\n            .test('passwords-match', 'New password must be different from old password!', function (value) {\n                return this.parent.oldpassword !== value\n            }),\n        confirmpassword: Yup.string().required(\"Confirm passsword is required!\")\n            .oneOf([Yup.ref('newpassword')], 'Passwords must match!')\n    });\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" justifyContent=\"center\">\n            <Formik\n                enableReinitialize\n                initialValues={{\n                    oldpassword: '',\n                    newpassword: '',\n                    confirmpassword: ''\n                }}\n                validationSchema={validationSchema}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    errors,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    isSubmitting,\n                    touched,\n                    values\n                }) => (\n                    <form onSubmit={handleSubmit}>\n                        <Grid item lg={12} md={12} xs={12}>\n                            <Card>\n                                <CardHeader\n                                    subheader=\"Please fill below details to change your password\"\n                                    title=\"Change Password\"\n                                    style={{ textAlign: \"center\" }}\n                                    titleTypographyProps={{ variant: 'h3', component: 'h3' }}\n                                />\n                                <Divider />\n                                <CardContent>\n                                    <Grid container spacing={2}>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Old Password\"\n                                                margin=\"normal\"\n                                                name=\"oldpassword\"\n                                                type=\"password\"\n                                                value={values.oldpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.oldpassword && errors.oldpassword)}\n                                                helperText={touched.oldpassword && errors.oldpassword}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"New Password\"\n                                                margin=\"normal\"\n                                                name=\"newpassword\"\n                                                type=\"password\"\n                                                value={values.newpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.newpassword && errors.newpassword)}\n                                                helperText={touched.newpassword && errors.newpassword}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} sm={12} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Confirm Password\"\n                                                margin=\"normal\"\n                                                name=\"confirmpassword\"\n                                                type=\"password\"\n                                                value={values.confirmpassword}\n                                                variant=\"outlined\"\n                                                inputProps={{ maxLength: 100 }}\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                error={Boolean(touched.confirmpassword && errors.confirmpassword)}\n                                                helperText={touched.confirmpassword && errors.confirmpassword}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                                <Divider />\n                                <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n                                    <Button\n                                        color=\"primary\"\n                                        disabled={isSubmitting}\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                    >\n                                        {(isSubmitting) ? \"Please wait...\" : \"Change Password\"}\n                                    </Button>\n                                </Box>\n                            </Card>\n                        </Grid>\n                    </form>\n                )}\n            </Formik>\n        </Box>\n    );\n};\n\nexport default ChangePassword;"]},"metadata":{},"sourceType":"module"}